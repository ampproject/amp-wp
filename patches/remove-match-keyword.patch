diff --git a/src/Builder/Identity.php b/src/Builder/Identity.php
index 5262925..54f4813 100644
--- a/src/Builder/Identity.php
+++ b/src/Builder/Identity.php
@@ -15,7 +15,7 @@
  * Defines the interface for recording unique identifiers. The identifiers
  * can be used to define the invocation order of expectations. The expectation
  * is recorded using id() and then defined in order using
- * PHPUnit\Framework\MockObject\Builder\Match::after().
+ * PHPUnit\Framework\MockObject\Builder\ParametersMatch::after().
  */
 interface Identity
 {
diff --git a/src/Builder/Match.php b/src/Builder/Match.php
deleted file mode 100644
index 19ecf08..0000000
--- a/src/Builder/Match.php
+++ /dev/null
@@ -1,26 +0,0 @@
-<?php
-/*
- * This file is part of the phpunit-mock-objects package.
- *
- * (c) Sebastian Bergmann <sebastian@phpunit.de>
- *
- * For the full copyright and license information, please view the LICENSE
- * file that was distributed with this source code.
- */
-namespace PHPUnit\Framework\MockObject\Builder;
-
-/**
- * Builder interface for invocation order matches.
- */
-interface Match extends Stub
-{
-    /**
-     * Defines the expectation which must occur before the current is valid.
-     *
-     * @param string $id The identification of the expectation that should
-     *                   occur before this one.
-     *
-     * @return Stub
-     */
-    public function after($id);
-}
diff --git a/src/Builder/NamespaceMatch.php b/src/Builder/NamespaceMatch.php
index e9599f5..6e33489 100644
--- a/src/Builder/NamespaceMatch.php
+++ b/src/Builder/NamespaceMatch.php
@@ -21,7 +21,7 @@ interface NamespaceMatch
      *
      * @param string $id The identification of the match builder
      *
-     * @return Match
+     * @return ParametersMatch
      */
     public function lookupId($id);

@@ -31,7 +31,7 @@ public function lookupId($id);
      * has been invoked.
      *
      * @param string $id      The identification of the match builder
-     * @param Match  $builder The builder which is being registered
+     * @param ParametersMatch  $builder The builder which is being registered
      */
-    public function registerId($id, Match $builder);
+    public function registerId($id, ParametersMatch $builder);
 }
diff --git a/src/Builder/ParametersMatch.php b/src/Builder/ParametersMatch.php
index 9eaed34..be36a47 100644
--- a/src/Builder/ParametersMatch.php
+++ b/src/Builder/ParametersMatch.php
@@ -14,8 +14,18 @@
 /**
  * Builder interface for parameter matchers.
  */
-interface ParametersMatch extends Match
+interface ParametersMatch extends Stub
 {
+	/**
+	 * Defines the expectation which must occur before the current is valid.
+	 *
+	 * @param string $id the identification of the expectation that should
+	 *                   occur before this one
+	 *
+	 * @return Stub
+	 */
+	public function after($id);
+
     /**
      * Sets the parameters to match for, each parameter to this function will
      * be part of match. To perform specific matches or constraints create a
diff --git a/src/InvocationMocker.php b/src/InvocationMocker.php
index f3fbece..dcc3d86 100644
--- a/src/InvocationMocker.php
+++ b/src/InvocationMocker.php
@@ -11,7 +11,7 @@

 use Exception;
 use PHPUnit\Framework\MockObject\Builder\InvocationMocker as BuilderInvocationMocker;
-use PHPUnit\Framework\MockObject\Builder\Match;
+use PHPUnit\Framework\MockObject\Builder\ParametersMatch;
 use PHPUnit\Framework\MockObject\Builder\NamespaceMatch;
 use PHPUnit\Framework\MockObject\Matcher\Invocation as MatcherInvocation;
 use PHPUnit\Framework\MockObject\Stub\MatcherCollection;
@@ -31,7 +31,7 @@ class InvocationMocker implements MatcherCollection, Invokable, NamespaceMatch
     private $matchers = [];

     /**
-     * @var Match[]
+     * @var ParametersMatch[]
      */
     private $builderMap = [];

@@ -83,15 +83,15 @@ public function lookupId($id)

     /**
      * @param mixed $id
-     * @param Match $builder
+     * @param ParametersMatch $builder
      *
      * @throws RuntimeException
      */
-    public function registerId($id, Match $builder)
+    public function registerId($id, ParametersMatch $builder)
     {
         if (isset($this->builderMap[$id])) {
             throw new RuntimeException(
-                'Match builder with id <' . $id . '> is already registered.'
+                'ParametersMatch builder with id <' . $id . '> is already registered.'
             );
         }

