{
    "2": {
        "file": {
            "description": "Functions for managing legacy templates",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "back-compat\/back-compat.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "functions": [
            {
                "name": "amp_backcompat_use_v03_templates",
                "namespace": "global",
                "aliases": [],
                "line": 20,
                "end_line": 24,
                "arguments": [],
                "doc": {
                    "description": "Add hooks to use legacy AMP post templates from before v0.4.",
                    "long_description": "If you want to use the template that shipped with v0.3 and earlier, you can use this to force that. Note that this may not stick around forever, so use caution and `function_exists`.\n Note that the old legacy post templates from AMP plugin v0.3 should no longer be used. Update to using the current AMP legacy post templates or better yet switch to using a full Reader theme.",
                    "tags": [
                        {
                            "name": "deprecated",
                            "content": "Use Reader themes instead of old legacy AMP post templates.",
                            "description": "Use Reader themes instead of old legacy AMP post templates."
                        },
                        {
                            "name": "since",
                            "content": "0.4"
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "functions": [
                        {
                            "name": "_deprecated_function",
                            "line": 21,
                            "end_line": 21,
                            "deprecation_version": "2.0"
                        },
                        {
                            "name": "add_filter",
                            "line": 22,
                            "end_line": 22
                        },
                        {
                            "name": "add_filter",
                            "line": 23,
                            "end_line": 23
                        }
                    ]
                }
            }
        ],
        "hooks": []
    },
    "12": {
        "file": {
            "description": "AMP meta box settings.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                },
                {
                    "name": "since",
                    "content": "0.6"
                }
            ]
        },
        "path": "includes\/admin\/class-amp-post-meta-box.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "includes": [
            {
                "name": "",
                "line": 172,
                "type": "Require"
            },
            {
                "name": "",
                "line": 249,
                "type": "Require"
            },
            {
                "name": "",
                "line": 375,
                "type": "Include"
            }
        ],
        "classes": [],
        "hooks": [
            {
                "name": "amp_featured_image_minimum_height",
                "line": 319,
                "end_line": 319,
                "type": "filter",
                "arguments": [
                    "$default_height"
                ],
                "doc": {
                    "description": "Filters the minimum height required for a featured image.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.0.9"
                        },
                        {
                            "name": "param",
                            "content": "The minimum height of the image, defaults to 675.                                           Returning a number less than or equal to zero disables the minimum constraint.",
                            "types": [
                                "int"
                            ],
                            "variable": "$featured_image_minimum_height"
                        }
                    ]
                }
            },
            {
                "name": "amp_featured_image_minimum_width",
                "line": 329,
                "end_line": 329,
                "type": "filter",
                "arguments": [
                    "$default_width"
                ],
                "doc": {
                    "description": "Filters the minimum width required for a featured image.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.0.9"
                        },
                        {
                            "name": "param",
                            "content": "The minimum width of the image, defaults to 1200.                                          Returning a number less than or equal to zero disables the minimum constraint.",
                            "types": [
                                "int"
                            ],
                            "variable": "$featured_image_minimum_width"
                        }
                    ]
                }
            }
        ]
    },
    "13": {
        "file": {
            "description": "Class AMP_Template_Customizer",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/admin\/class-amp-template-customizer.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "includes": [
            {
                "name": "",
                "line": 329,
                "type": "Require"
            },
            {
                "name": "",
                "line": 584,
                "type": "Require"
            },
            {
                "name": "",
                "line": 652,
                "type": "Require"
            }
        ],
        "classes": [],
        "hooks": {
            "0": {
                "name": "amp_customizer_init",
                "line": 108,
                "end_line": 108,
                "type": "action",
                "arguments": [
                    "$self"
                ],
                "doc": {
                    "description": "Fires when the AMP Template Customizer initializes.",
                    "long_description": "In practice the `customize_register` hook should be used instead.",
                    "tags": [
                        {
                            "name": "param",
                            "content": "Instance.",
                            "types": [
                                "\\AMP_Template_Customizer"
                            ],
                            "variable": "$self"
                        },
                        {
                            "name": "since",
                            "content": "0.4"
                        }
                    ]
                }
            },
            "1": {
                "name": "amp_customizer_register_ui",
                "line": 282,
                "end_line": 282,
                "type": "action",
                "arguments": [
                    "$this->wp_customize"
                ],
                "doc": {
                    "description": "Fires after the AMP panel has been registered for plugins to add additional controls.",
                    "long_description": "In practice the `customize_register` hook should be used instead.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.4"
                        },
                        {
                            "name": "param",
                            "content": "Manager.",
                            "types": [
                                "\\WP_Customize_Manager"
                            ],
                            "variable": "$manager"
                        }
                    ]
                }
            },
            "2": {
                "name": "amp_customizer_register_settings",
                "line": 318,
                "end_line": 318,
                "type": "action",
                "arguments": [
                    "$this->wp_customize"
                ],
                "doc": {
                    "description": "Fires when plugins should register settings for AMP.",
                    "long_description": "In practice the `customize_register` hook should be used instead.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.4"
                        },
                        {
                            "name": "param",
                            "content": "Manager.",
                            "types": [
                                "\\WP_Customize_Manager"
                            ],
                            "variable": "$manager"
                        }
                    ]
                }
            },
            "9": {
                "name": "amp_customizer_enqueue_scripts",
                "line": 634,
                "end_line": 634,
                "type": "action",
                "arguments": [
                    "$this->wp_customize"
                ],
                "doc": {
                    "description": "Fires when plugins should register settings for AMP.",
                    "long_description": "In practice the `customize_controls_enqueue_scripts` hook should be used instead.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.4"
                        },
                        {
                            "name": "param",
                            "content": "Manager.",
                            "types": [
                                "\\WP_Customize_Manager"
                            ],
                            "variable": "$manager"
                        }
                    ]
                }
            },
            "11": {
                "name": "amp_customizer_enqueue_preview_scripts",
                "line": 725,
                "end_line": 725,
                "type": "action",
                "arguments": [
                    "$this->wp_customize"
                ],
                "doc": {
                    "description": "Fires when plugins should enqueue their own scripts for the AMP Customizer preview.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.4"
                        },
                        {
                            "name": "param",
                            "content": "Manager.",
                            "types": [
                                "\\WP_Customize_Manager"
                            ],
                            "variable": "$wp_customize"
                        }
                    ]
                }
            }
        }
    },
    "14": {
        "file": {
            "description": "Callbacks for adding AMP-related things to the admin.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/admin\/functions.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "functions": [],
        "hooks": [
            {
                "name": "amp_customizer_post_type",
                "line": 83,
                "end_line": 83,
                "type": "filter",
                "arguments": [
                    "'post'"
                ],
                "doc": {
                    "description": "Filter the post type to retrieve the latest for use in the AMP template customizer.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "todo",
                            "content": "This filter doesn't actually do anything at present. Instead of array_unique() below, an array_intersect() should have been used."
                        },
                        {
                            "name": "param",
                            "content": "Post type slug. Default 'post'.",
                            "types": [
                                "string"
                            ],
                            "variable": "$post_type"
                        }
                    ]
                }
            }
        ]
    },
    "15": {
        "file": {
            "description": "Callbacks for adding AMP-related things to the main theme.",
            "long_description": "",
            "tags": [
                {
                    "name": "codeCoverageIgnore",
                    "content": ""
                },
                {
                    "name": "deprecated",
                    "content": "Function in this file has been moved to amp-helper-functions.php.",
                    "description": "Function in this file has been moved to amp-helper-functions.php."
                },
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/amp-frontend-actions.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "uses": {
            "functions": [
                {
                    "name": "_deprecated_file",
                    "line": 10,
                    "end_line": 20,
                    "deprecation_version": "1.0"
                },
                {
                    "name": "sprintf",
                    "line": 14,
                    "end_line": 19
                },
                {
                    "name": "esc_html__",
                    "line": 16,
                    "end_line": 16
                }
            ]
        },
        "functions": [
            {
                "name": "amp_frontend_add_canonical",
                "namespace": "global",
                "aliases": [],
                "line": 31,
                "end_line": 34,
                "arguments": [],
                "doc": {
                    "description": "Add amphtml link to frontend.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "deprecated",
                            "content": "Use amp_add_amphtml_link() instead.",
                            "description": "Use amp_add_amphtml_link() instead."
                        },
                        {
                            "name": "since",
                            "content": "0.2"
                        },
                        {
                            "name": "since",
                            "content": "1.0",
                            "description": "Deprecated"
                        },
                        {
                            "name": "see",
                            "content": "",
                            "refers": "amp_add_amphtml_link()"
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "functions": [
                        {
                            "name": "_deprecated_function",
                            "line": 32,
                            "end_line": 32,
                            "deprecation_version": "1.0"
                        },
                        {
                            "name": "amp_add_amphtml_link",
                            "line": 33,
                            "end_line": 33
                        }
                    ]
                }
            }
        ],
        "hooks": []
    },
    "16": {
        "file": {
            "description": "AMP Helper Functions",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/amp-helper-functions.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "constants": [
            {
                "name": "AMP_QUERY_VAR",
                "line": 270,
                "value": "amp_get_slug()"
            }
        ],
        "functions": {
            "9": {
                "name": "amp_is_canonical",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 348,
                "end_line": 350,
                "arguments": [],
                "doc": {
                    "description": "Whether this is in 'canonical mode'.",
                    "long_description": "Themes can register support for this with `add_theme_support( AMP_Theme_Support::SLUG )`:\n ```php\nadd_theme_support( AMP_Theme_Support::SLUG );\n```\n\nThis will serve templates in AMP-first, allowing you to use AMP components in your theme templates.\nIf you want to make available in transitional mode, where templates are served in AMP or non-AMP documents, do:\n\n```php\nadd_theme_support( AMP_Theme_Support::SLUG, array(\n    'paired' => true,\n) );\n```\n\nTransitional mode is also implied if you define a `template_dir`:\n\n```php\nadd_theme_support( AMP_Theme_Support::SLUG, array(\n    'template_dir' => 'amp',\n) );\n```\n\nIf you want to have AMP-specific templates in addition to serving AMP-first, do:\n\n```php\nadd_theme_support( AMP_Theme_Support::SLUG, array(\n    'paired'       => false,\n    'template_dir' => 'amp',\n) );\n```",
                    "tags": [
                        {
                            "name": "see",
                            "content": "",
                            "refers": "AMP_Theme_Support::read_theme_support()"
                        },
                        {
                            "name": "return",
                            "content": "Whether this is in AMP 'canonical' mode, that is whether it is AMP-first and there is not a separate (paired) AMP URL.",
                            "types": [
                                "boolean"
                            ]
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "methods": [
                        {
                            "name": "get_option",
                            "class": "\\AMP_Options_Manager",
                            "static": true,
                            "line": 349,
                            "end_line": 349
                        }
                    ]
                }
            },
            "10": {
                "name": "amp_is_legacy",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 358,
                "end_line": 369,
                "arguments": [],
                "doc": {
                    "description": "Determines whether the legacy AMP post templates are being used.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.0"
                        },
                        {
                            "name": "return",
                            "content": "",
                            "types": [
                                "bool"
                            ]
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "methods": [
                        {
                            "name": "get_option",
                            "class": "\\AMP_Options_Manager",
                            "static": true,
                            "line": 359,
                            "end_line": 359
                        },
                        {
                            "name": "get_option",
                            "class": "\\AMP_Options_Manager",
                            "static": true,
                            "line": 363,
                            "end_line": 363
                        },
                        {
                            "name": "exists",
                            "class": "wp_get_theme($reader_theme)",
                            "static": false,
                            "line": 368,
                            "end_line": 368
                        }
                    ],
                    "functions": [
                        {
                            "name": "wp_get_theme",
                            "line": 368,
                            "end_line": 368
                        }
                    ]
                }
            },
            "11": {
                "name": "amp_is_available",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 380,
                "end_line": 563,
                "arguments": [],
                "doc": {
                    "description": "Determine whether AMP is available for the current URL.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.0"
                        },
                        {
                            "name": "return",
                            "content": "Whether there is an AMP version for the provided URL.",
                            "types": [
                                "bool"
                            ]
                        },
                        {
                            "name": "global",
                            "content": "string $pagenow"
                        },
                        {
                            "name": "global",
                            "content": "WP_Query $wp_query"
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "functions": [
                        {
                            "name": "wp_doing_cron",
                            "line": 384,
                            "end_line": 384
                        },
                        {
                            "name": "defined",
                            "line": 384,
                            "end_line": 384
                        },
                        {
                            "name": "is_admin",
                            "line": 384,
                            "end_line": 384
                        },
                        {
                            "name": "in_array",
                            "line": 384,
                            "end_line": 384
                        },
                        {
                            "name": "in_array",
                            "line": 402,
                            "end_line": 402
                        },
                        {
                            "name": "sprintf",
                            "line": 406,
                            "end_line": 412
                        },
                        {
                            "name": "__",
                            "line": 408,
                            "end_line": 408
                        },
                        {
                            "name": "current_action",
                            "line": 414,
                            "end_line": 414
                        },
                        {
                            "name": "sprintf",
                            "line": 417,
                            "end_line": 420
                        },
                        {
                            "name": "__",
                            "line": 422,
                            "end_line": 422
                        },
                        {
                            "name": "sprintf",
                            "line": 425,
                            "end_line": 431
                        },
                        {
                            "name": "__",
                            "line": 427,
                            "end_line": 427
                        },
                        {
                            "name": "__",
                            "line": 439,
                            "end_line": 439
                        },
                        {
                            "name": "__",
                            "line": 443,
                            "end_line": 443
                        },
                        {
                            "name": "__",
                            "line": 447,
                            "end_line": 447
                        },
                        {
                            "name": "__",
                            "line": 450,
                            "end_line": 450
                        },
                        {
                            "name": "sprintf",
                            "line": 455,
                            "end_line": 455
                        },
                        {
                            "name": "_doing_it_wrong",
                            "line": 459,
                            "end_line": 459
                        },
                        {
                            "name": "esc_html",
                            "line": 459,
                            "end_line": 459
                        },
                        {
                            "name": "did_action",
                            "line": 464,
                            "end_line": 464
                        },
                        {
                            "name": "warn",
                            "line": 465,
                            "end_line": 465
                        },
                        {
                            "name": "defined",
                            "line": 466,
                            "end_line": 466
                        },
                        {
                            "name": "did_action",
                            "line": 471,
                            "end_line": 471
                        },
                        {
                            "name": "warn",
                            "line": 472,
                            "end_line": 472
                        },
                        {
                            "name": "class_exists",
                            "line": 478,
                            "end_line": 478
                        },
                        {
                            "name": "defined",
                            "line": 478,
                            "end_line": 478
                        },
                        {
                            "name": "method_exists",
                            "line": 498,
                            "end_line": 498
                        },
                        {
                            "name": "is_customize_preview",
                            "line": 510,
                            "end_line": 510
                        },
                        {
                            "name": "amp_is_legacy",
                            "line": 514,
                            "end_line": 514
                        },
                        {
                            "name": "did_action",
                            "line": 517,
                            "end_line": 517
                        },
                        {
                            "name": "warn",
                            "line": 518,
                            "end_line": 518
                        },
                        {
                            "name": "amp_is_canonical",
                            "line": 524,
                            "end_line": 524
                        },
                        {
                            "name": "get_queried_object",
                            "line": 531,
                            "end_line": 531
                        },
                        {
                            "name": "amp_is_canonical",
                            "line": 543,
                            "end_line": 543
                        },
                        {
                            "name": "amp_get_current_url",
                            "line": 545,
                            "end_line": 545
                        },
                        {
                            "name": "count",
                            "line": 548,
                            "end_line": 548
                        },
                        {
                            "name": "amp_is_post_supported",
                            "line": 556,
                            "end_line": 556
                        }
                    ],
                    "methods": [
                        {
                            "name": "get",
                            "class": "\\AmpProject\\AmpWP\\Services",
                            "static": true,
                            "line": 392,
                            "end_line": 392
                        },
                        {
                            "name": "analyze_backtrace",
                            "class": "$likely_culprit_detector",
                            "static": false,
                            "line": 393,
                            "end_line": 393
                        },
                        {
                            "name": "get",
                            "class": "$wp_query",
                            "static": false,
                            "line": 478,
                            "end_line": 478
                        },
                        {
                            "name": "is_embed",
                            "class": "$wp_query",
                            "static": false,
                            "line": 488,
                            "end_line": 488
                        },
                        {
                            "name": "is_feed",
                            "class": "$wp_query",
                            "static": false,
                            "line": 490,
                            "end_line": 490
                        },
                        {
                            "name": "is_comment_feed",
                            "class": "$wp_query",
                            "static": false,
                            "line": 492,
                            "end_line": 492
                        },
                        {
                            "name": "is_trackback",
                            "class": "$wp_query",
                            "static": false,
                            "line": 494,
                            "end_line": 494
                        },
                        {
                            "name": "is_robots",
                            "class": "$wp_query",
                            "static": false,
                            "line": 496,
                            "end_line": 496
                        },
                        {
                            "name": "is_favicon",
                            "class": "$wp_query",
                            "static": false,
                            "line": 498,
                            "end_line": 498
                        },
                        {
                            "name": "get_option",
                            "class": "\\AMP_Options_Manager",
                            "static": true,
                            "line": 506,
                            "end_line": 506
                        },
                        {
                            "name": "get_option",
                            "class": "\\AMP_Options_Manager",
                            "static": true,
                            "line": 508,
                            "end_line": 508
                        },
                        {
                            "name": "get_option",
                            "class": "\\AMP_Options_Manager",
                            "static": true,
                            "line": 519,
                            "end_line": 519
                        },
                        {
                            "name": "has_cap",
                            "class": "\\AMP_Validation_Manager",
                            "static": true,
                            "line": 524,
                            "end_line": 524
                        },
                        {
                            "name": "get_template_availability",
                            "class": "\\AMP_Theme_Support",
                            "static": true,
                            "line": 534,
                            "end_line": 534
                        },
                        {
                            "name": "has_cap",
                            "class": "\\AMP_Validation_Manager",
                            "static": true,
                            "line": 543,
                            "end_line": 543
                        },
                        {
                            "name": "get_invalid_url_validation_errors",
                            "class": "\\AMP_Validated_URL_Post_Type",
                            "static": true,
                            "line": 544,
                            "end_line": 547
                        },
                        {
                            "name": "is_singular",
                            "class": "$wp_query",
                            "static": false,
                            "line": 555,
                            "end_line": 555
                        }
                    ]
                }
            },
            "13": {
                "name": "amp_get_slug",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 594,
                "end_line": 616,
                "arguments": [
                    {
                        "name": "$ignore_late_defined_slug",
                        "default": "false",
                        "type": ""
                    }
                ],
                "doc": {
                    "description": "Get the slug used in AMP for the query var, endpoint, and post type support.",
                    "long_description": "The return value can be overridden by previously defining a AMP_QUERY_VAR constant or by adding a 'amp_query_var' filter, but *warning* this ability may be deprecated in the future. Normally the slug should be just 'amp'.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.7"
                        },
                        {
                            "name": "since",
                            "content": "2.1",
                            "description": "Added $ignore_late_defined_slug argument."
                        },
                        {
                            "name": "param",
                            "content": "Whether to ignore the late defined slug.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$ignore_late_defined_slug"
                        },
                        {
                            "name": "return",
                            "content": "Slug used for query var, endpoint, and post type support.",
                            "types": [
                                "string"
                            ]
                        }
                    ]
                },
                "hooks": [
                    {
                        "name": "amp_query_var",
                        "line": 615,
                        "end_line": 615,
                        "type": "filter",
                        "arguments": [
                            "defined('AMP_QUERY_VAR') ? AMP_QUERY_VAR : \\AmpProject\\AmpWP\\QueryVar::AMP"
                        ],
                        "doc": {
                            "description": "Filter the AMP query variable.",
                            "long_description": "Warning: This filter may become deprecated.",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.3.2"
                                },
                                {
                                    "name": "param",
                                    "content": "The AMP query variable.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$query_var"
                                }
                            ]
                        }
                    }
                ],
                "uses": {
                    "functions": [
                        {
                            "name": "did_action",
                            "line": 599,
                            "end_line": 599
                        },
                        {
                            "name": "is_string",
                            "line": 601,
                            "end_line": 601
                        },
                        {
                            "name": "apply_filters",
                            "line": 615,
                            "end_line": 615
                        },
                        {
                            "name": "defined",
                            "line": 615,
                            "end_line": 615
                        }
                    ],
                    "methods": [
                        {
                            "name": "get_option",
                            "class": "\\AMP_Options_Manager",
                            "static": true,
                            "line": 600,
                            "end_line": 600
                        }
                    ]
                }
            },
            "15": {
                "name": "amp_get_permalink",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 675,
                "end_line": 680,
                "arguments": [
                    {
                        "name": "$post_id",
                        "default": null,
                        "type": ""
                    }
                ],
                "doc": {
                    "description": "Retrieves the full AMP-specific permalink for the given post ID.",
                    "long_description": "On a site in Standard mode, this is the same as `get_permalink()`.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.1"
                        },
                        {
                            "name": "param",
                            "content": "Post ID.",
                            "types": [
                                "int"
                            ],
                            "variable": "$post_id"
                        },
                        {
                            "name": "return",
                            "content": "AMP permalink.",
                            "types": [
                                "string"
                            ]
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "functions": [
                        {
                            "name": "amp_is_canonical",
                            "line": 676,
                            "end_line": 676
                        },
                        {
                            "name": "get_permalink",
                            "line": 677,
                            "end_line": 677
                        },
                        {
                            "name": "amp_add_paired_endpoint",
                            "line": 679,
                            "end_line": 679
                        },
                        {
                            "name": "get_permalink",
                            "line": 679,
                            "end_line": 679
                        }
                    ]
                }
            },
            "16": {
                "name": "amp_remove_endpoint",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 692,
                "end_line": 694,
                "arguments": [
                    {
                        "name": "$url",
                        "default": null,
                        "type": ""
                    }
                ],
                "doc": {
                    "description": "Remove the AMP endpoint (and query var) from a given URL.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.7"
                        },
                        {
                            "name": "since",
                            "content": "2.1",
                            "description": "Deprecated."
                        },
                        {
                            "name": "deprecated",
                            "content": "Use amp_remove_paired_endpoint() instead.",
                            "description": "Use amp_remove_paired_endpoint() instead."
                        },
                        {
                            "name": "param",
                            "content": "URL.",
                            "types": [
                                "string"
                            ],
                            "variable": "$url"
                        },
                        {
                            "name": "return",
                            "content": "URL with AMP stripped.",
                            "types": [
                                "string"
                            ]
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "functions": [
                        {
                            "name": "amp_remove_paired_endpoint",
                            "line": 693,
                            "end_line": 693
                        }
                    ]
                }
            },
            "17": {
                "name": "amp_add_amphtml_link",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 703,
                "end_line": 748,
                "arguments": [],
                "doc": {
                    "description": "Add amphtml link.",
                    "long_description": "If there are known validation errors for the current URL then do not output anything.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.0"
                        }
                    ]
                },
                "hooks": [
                    {
                        "name": "amp_frontend_show_canonical",
                        "line": 720,
                        "end_line": 733,
                        "type": "filter_deprecated",
                        "arguments": [
                            "array(true)",
                            "'2.0'",
                            "''",
                            "sprintf(esc_html__('Removal of %1$s link should be done by removing %2$s from the %3$s action at %4$s.', 'amp'), 'amphtml', __FUNCTION__ . '()', 'wp_head', 'template_redirect')"
                        ],
                        "doc": {
                            "description": "Filters whether to show the amphtml link on the frontend.",
                            "long_description": "This is deprecated since the name was wrong and the use case is not clear. To remove this from being printed, instead of using the filter you can rather do:\n     add_action( 'template_redirect', static function () {         remove_action( 'wp_head', 'amp_add_amphtml_link' );     } );",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.2"
                                },
                                {
                                    "name": "deprecated",
                                    "content": "Remove amp_add_amphtml_link() call on wp_head action instead.",
                                    "description": "Remove amp_add_amphtml_link() call on wp_head action instead."
                                }
                            ]
                        }
                    }
                ],
                "uses": {
                    "functions": [
                        {
                            "name": "amp_is_canonical",
                            "line": 705,
                            "end_line": 705
                        },
                        {
                            "name": "apply_filters_deprecated",
                            "line": 720,
                            "end_line": 733
                        },
                        {
                            "name": "sprintf",
                            "line": 725,
                            "end_line": 732
                        },
                        {
                            "name": "esc_html__",
                            "line": 727,
                            "end_line": 727
                        },
                        {
                            "name": "amp_is_available",
                            "line": 738,
                            "end_line": 738
                        },
                        {
                            "name": "printf",
                            "line": 739,
                            "end_line": 739
                        },
                        {
                            "name": "esc_html__",
                            "line": 739,
                            "end_line": 739
                        },
                        {
                            "name": "amp_add_paired_endpoint",
                            "line": 743,
                            "end_line": 743
                        },
                        {
                            "name": "amp_get_current_url",
                            "line": 743,
                            "end_line": 743
                        },
                        {
                            "name": "remove_query_arg",
                            "line": 745,
                            "end_line": 745
                        },
                        {
                            "name": "printf",
                            "line": 746,
                            "end_line": 746
                        },
                        {
                            "name": "esc_url",
                            "line": 746,
                            "end_line": 746
                        }
                    ]
                }
            },
            "18": {
                "name": "amp_is_post_supported",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 759,
                "end_line": 761,
                "arguments": [
                    {
                        "name": "$post",
                        "default": null,
                        "type": ""
                    }
                ],
                "doc": {
                    "description": "Determine whether a given post supports AMP.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.0",
                            "description": "Formerly known as post_supports_amp()."
                        },
                        {
                            "name": "see",
                            "content": "",
                            "refers": "AMP_Post_Type_Support::get_support_errors()"
                        },
                        {
                            "name": "param",
                            "content": "Post.",
                            "types": [
                                "\\WP_Post",
                                "int"
                            ],
                            "variable": "$post"
                        },
                        {
                            "name": "return",
                            "content": "Whether the post supports AMP.",
                            "types": [
                                "bool"
                            ]
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "functions": [
                        {
                            "name": "count",
                            "line": 760,
                            "end_line": 760
                        }
                    ],
                    "methods": [
                        {
                            "name": "get_support_errors",
                            "class": "\\AMP_Post_Type_Support",
                            "static": true,
                            "line": 760,
                            "end_line": 760
                        }
                    ]
                }
            },
            "19": {
                "name": "post_supports_amp",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 774,
                "end_line": 776,
                "arguments": [
                    {
                        "name": "$post",
                        "default": null,
                        "type": ""
                    }
                ],
                "doc": {
                    "description": "Determine whether a given post supports AMP.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.1"
                        },
                        {
                            "name": "since",
                            "content": "0.6",
                            "description": "Returns false when post has meta to disable AMP."
                        },
                        {
                            "name": "since",
                            "content": "2.0",
                            "description": "Renamed to AMP-prefixed version, amp_is_post_supported()."
                        },
                        {
                            "name": "deprecated",
                            "content": "Use amp_is_post_supported() instead.",
                            "description": "Use amp_is_post_supported() instead."
                        },
                        {
                            "name": "param",
                            "content": "Post.",
                            "types": [
                                "\\WP_Post"
                            ],
                            "variable": "$post"
                        },
                        {
                            "name": "return",
                            "content": "Whether the post supports AMP.",
                            "types": [
                                "bool"
                            ]
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "functions": [
                        {
                            "name": "amp_is_post_supported",
                            "line": 775,
                            "end_line": 775
                        }
                    ]
                }
            },
            "20": {
                "name": "amp_is_request",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 792,
                "end_line": 815,
                "arguments": [],
                "doc": {
                    "description": "Determine whether the current request is for an AMP page.",
                    "long_description": "This function cannot be called before the parse_query action because it needs to be able to determine the queried object is able to be served as AMP. If 'amp' theme support is not present, this function returns true just if the query var is present. If theme support is present, then it returns true in transitional mode if an AMP template is available and the query var is present, or else in standard mode if just the template is available.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.0",
                            "description": "Formerly known as is_amp_endpoint()."
                        },
                        {
                            "name": "return",
                            "content": "Whether it is the AMP endpoint.",
                            "types": [
                                "bool"
                            ]
                        },
                        {
                            "name": "global",
                            "content": "WP_Query $wp_query"
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "functions": [
                        {
                            "name": "amp_is_canonical",
                            "line": 796,
                            "end_line": 796
                        },
                        {
                            "name": "amp_has_paired_endpoint",
                            "line": 798,
                            "end_line": 798
                        },
                        {
                            "name": "amp_is_available",
                            "line": 802,
                            "end_line": 802
                        },
                        {
                            "name": "did_action",
                            "line": 807,
                            "end_line": 807
                        }
                    ],
                    "methods": [
                        {
                            "name": "get_option",
                            "class": "\\AMP_Options_Manager",
                            "static": true,
                            "line": 808,
                            "end_line": 808
                        }
                    ]
                }
            },
            "21": {
                "name": "is_amp_endpoint",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 832,
                "end_line": 834,
                "arguments": [],
                "doc": {
                    "description": "Determine whether the current response being served as AMP.",
                    "long_description": "This function cannot be called before the parse_query action because it needs to be able to determine the queried object is able to be served as AMP. If 'amp' theme support is not present, this function returns true just if the query var is present. If theme support is present, then it returns true in transitional mode if an AMP template is available and the query var is present, or else in standard mode if just the template is available.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.1"
                        },
                        {
                            "name": "since",
                            "content": "2.0",
                            "description": "Renamed to AMP-prefixed version, amp_is_request()."
                        },
                        {
                            "name": "deprecated",
                            "content": "Use amp_is_request() instead.",
                            "description": "Use amp_is_request() instead."
                        },
                        {
                            "name": "return",
                            "content": "Whether it is the AMP endpoint.",
                            "types": [
                                "bool"
                            ]
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "functions": [
                        {
                            "name": "amp_is_request",
                            "line": 833,
                            "end_line": 833
                        }
                    ]
                }
            },
            "26": {
                "name": "amp_is_bento_enabled",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 923,
                "end_line": 936,
                "arguments": [],
                "doc": {
                    "description": "Determine whether the use of Bento components is enabled.",
                    "long_description": "When Bento is enabled, newer experimental versions of AMP components are used which incorporate the next generation of the component framework.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.2"
                        },
                        {
                            "name": "link",
                            "content": "https:\/\/blog.amp.dev\/2021\/01\/28\/bento\/",
                            "link": "https:\/\/blog.amp.dev\/2021\/01\/28\/bento\/"
                        },
                        {
                            "name": "return",
                            "content": "Whether Bento components are enabled.",
                            "types": [
                                "bool"
                            ]
                        }
                    ]
                },
                "hooks": [
                    {
                        "name": "amp_bento_enabled",
                        "line": 935,
                        "end_line": 935,
                        "type": "filter",
                        "arguments": [
                            "false"
                        ],
                        "doc": {
                            "description": "Filters whether the use of Bento components is enabled.",
                            "long_description": "When Bento is enabled, newer experimental versions of AMP components are used which incorporate the next generation of the component framework.",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "2.2"
                                },
                                {
                                    "name": "link",
                                    "content": "https:\/\/blog.amp.dev\/2021\/01\/28\/bento\/",
                                    "link": "https:\/\/blog.amp.dev\/2021\/01\/28\/bento\/"
                                },
                                {
                                    "name": "param",
                                    "content": "Enabled.",
                                    "types": [
                                        "bool"
                                    ],
                                    "variable": "$enabled"
                                }
                            ]
                        }
                    }
                ],
                "uses": {
                    "functions": [
                        {
                            "name": "apply_filters",
                            "line": 935,
                            "end_line": 935
                        }
                    ]
                }
            },
            "36": {
                "name": "amp_is_dev_mode",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 1428,
                "end_line": 1451,
                "arguments": [],
                "doc": {
                    "description": "Determine whether AMP dev mode is enabled.",
                    "long_description": "When enabled, the `<html>` element will get the data-ampdevmode attribute and the plugin will add the same attribute to elements associated with the admin bar and other elements that are provided by the `amp_dev_mode_element_xpaths` filter.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.3"
                        },
                        {
                            "name": "return",
                            "content": "Whether AMP dev mode is enabled.",
                            "types": [
                                "bool"
                            ]
                        }
                    ]
                },
                "hooks": [
                    {
                        "name": "amp_dev_mode_enabled",
                        "line": 1440,
                        "end_line": 1450,
                        "type": "filter",
                        "arguments": [
                            "is_admin_bar_showing() && is_user_logged_in() || is_customize_preview()"
                        ],
                        "doc": {
                            "description": "Filters whether AMP mode is enabled.",
                            "long_description": "When enabled, the data-ampdevmode attribute will be added to the document element and it will allow the attributes to be added to the admin bar. It will also add the attribute to all elements which match the queries for the expressions returned by the 'amp_dev_mode_element_xpaths' filter.",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "1.3"
                                },
                                {
                                    "name": "param",
                                    "content": "Whether AMP dev mode is enabled.",
                                    "types": [
                                        "bool"
                                    ],
                                    "variable": "$is_dev_mode_enabled"
                                }
                            ]
                        }
                    }
                ],
                "uses": {
                    "functions": [
                        {
                            "name": "apply_filters",
                            "line": 1440,
                            "end_line": 1450
                        },
                        {
                            "name": "is_admin_bar_showing",
                            "line": 1446,
                            "end_line": 1446
                        },
                        {
                            "name": "is_user_logged_in",
                            "line": 1446,
                            "end_line": 1446
                        },
                        {
                            "name": "is_customize_preview",
                            "line": 1448,
                            "end_line": 1448
                        }
                    ]
                }
            },
            "37": {
                "name": "amp_is_native_img_used",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 1460,
                "end_line": 1475,
                "arguments": [],
                "doc": {
                    "description": "Determine whether native `img` should be used instead of converting to `amp-img`.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.2"
                        },
                        {
                            "name": "return",
                            "content": "Whether to use `img`.",
                            "types": [
                                "bool"
                            ]
                        }
                    ]
                },
                "hooks": [
                    {
                        "name": "amp_native_img_used",
                        "line": 1474,
                        "end_line": 1474,
                        "type": "filter",
                        "arguments": [
                            "$use_native_img_tag"
                        ],
                        "doc": {
                            "description": "Filters whether to use the native `img` element rather than convert to `amp-img`.",
                            "long_description": "This filter is a feature flag to opt-in to discontinue using `amp-img` (and `amp-anim`) which will be deprecated in AMP in the near future. Once this lands in AMP, this filter will switch to defaulting to true instead of false.",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "2.2"
                                },
                                {
                                    "name": "link",
                                    "content": "https:\/\/github.com\/ampproject\/amphtml\/issues\/30442",
                                    "link": "https:\/\/github.com\/ampproject\/amphtml\/issues\/30442"
                                },
                                {
                                    "name": "param",
                                    "content": "Whether to use `img`.",
                                    "types": [
                                        "bool"
                                    ],
                                    "variable": "$use_native"
                                }
                            ]
                        }
                    }
                ],
                "uses": {
                    "methods": [
                        {
                            "name": "get_option",
                            "class": "\\AMP_Options_Manager",
                            "static": true,
                            "line": 1461,
                            "end_line": 1461
                        }
                    ],
                    "functions": [
                        {
                            "name": "apply_filters",
                            "line": 1474,
                            "end_line": 1474
                        }
                    ]
                }
            },
            "45": {
                "name": "amp_generate_script_hash",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 2076,
                "end_line": 2091,
                "arguments": [
                    {
                        "name": "$script",
                        "default": null,
                        "type": ""
                    }
                ],
                "doc": {
                    "description": "Generate hash for inline amp-script.",
                    "long_description": "The sha384 hash used by amp-script is represented not as hexadecimal but as base64url, which is defined in RFC 4648 under section 5, \"Base 64 Encoding with URL and Filename Safe Alphabet\". It is sometimes referred to as \"web safe\".",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.4.0"
                        },
                        {
                            "name": "link",
                            "content": "https:\/\/amp.dev\/documentation\/components\/amp-script\/#security-features",
                            "link": "https:\/\/amp.dev\/documentation\/components\/amp-script\/#security-features"
                        },
                        {
                            "name": "link",
                            "content": "https:\/\/github.com\/ampproject\/amphtml\/blob\/e8707858895c2af25903af25d396e144e64690ba\/extensions\/amp-script\/0.1\/amp-script.js#L401-L425",
                            "link": "https:\/\/github.com\/ampproject\/amphtml\/blob\/e8707858895c2af25903af25d396e144e64690ba\/extensions\/amp-script\/0.1\/amp-script.js#L401-L425"
                        },
                        {
                            "name": "link",
                            "content": "https:\/\/github.com\/ampproject\/amphtml\/blob\/27b46b9c8c0fb3711a00376668d808f413d798ed\/src\/service\/crypto-impl.js#L67-L124",
                            "link": "https:\/\/github.com\/ampproject\/amphtml\/blob\/27b46b9c8c0fb3711a00376668d808f413d798ed\/src\/service\/crypto-impl.js#L67-L124"
                        },
                        {
                            "name": "link",
                            "content": "https:\/\/github.com\/ampproject\/amphtml\/blob\/c4a663d0ba13d0488c6fe73c55dc8c971ac6ec0d\/src\/utils\/base64.js#L52-L61",
                            "link": "https:\/\/github.com\/ampproject\/amphtml\/blob\/c4a663d0ba13d0488c6fe73c55dc8c971ac6ec0d\/src\/utils\/base64.js#L52-L61"
                        },
                        {
                            "name": "link",
                            "content": "https:\/\/tools.ietf.org\/html\/rfc4648#section-5",
                            "link": "https:\/\/tools.ietf.org\/html\/rfc4648#section-5"
                        },
                        {
                            "name": "param",
                            "content": "Script.",
                            "types": [
                                "string"
                            ],
                            "variable": "$script"
                        },
                        {
                            "name": "return",
                            "content": "Script hash or null if the sha384 algorithm is not supported.",
                            "types": [
                                "string",
                                "null"
                            ]
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "functions": [
                        {
                            "name": "hash",
                            "line": 2078,
                            "end_line": 2078
                        },
                        {
                            "name": "str_replace",
                            "line": 2085,
                            "end_line": 2089
                        },
                        {
                            "name": "base64_encode",
                            "line": 2088,
                            "end_line": 2088
                        }
                    ]
                }
            },
            "46": {
                "name": "amp_add_paired_endpoint",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 2101,
                "end_line": 2113,
                "arguments": [
                    {
                        "name": "$url",
                        "default": null,
                        "type": ""
                    }
                ],
                "doc": {
                    "description": "Turn a given URL into a paired AMP URL.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.1"
                        },
                        {
                            "name": "param",
                            "content": "URL.",
                            "types": [
                                "string"
                            ],
                            "variable": "$url"
                        },
                        {
                            "name": "return",
                            "content": "AMP URL.",
                            "types": [
                                "string"
                            ]
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "methods": [
                        {
                            "name": "add_endpoint",
                            "class": "\\AmpProject\\AmpWP\\Services::get('paired_routing')",
                            "static": false,
                            "line": 2103,
                            "end_line": 2103
                        },
                        {
                            "name": "get",
                            "class": "\\AmpProject\\AmpWP\\Services",
                            "static": true,
                            "line": 2103,
                            "end_line": 2103
                        },
                        {
                            "name": "getMessage",
                            "class": "$e",
                            "static": false,
                            "line": 2110,
                            "end_line": 2110
                        }
                    ],
                    "functions": [
                        {
                            "name": "amp_is_enabled",
                            "line": 2105,
                            "end_line": 2105
                        },
                        {
                            "name": "__",
                            "line": 2106,
                            "end_line": 2106
                        },
                        {
                            "name": "__",
                            "line": 2108,
                            "end_line": 2108
                        },
                        {
                            "name": "_doing_it_wrong",
                            "line": 2110,
                            "end_line": 2110
                        },
                        {
                            "name": "esc_html",
                            "line": 2110,
                            "end_line": 2110
                        },
                        {
                            "name": "esc_html",
                            "line": 2110,
                            "end_line": 2110
                        }
                    ]
                }
            },
            "47": {
                "name": "amp_has_paired_endpoint",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 2123,
                "end_line": 2135,
                "arguments": [
                    {
                        "name": "$url",
                        "default": "''",
                        "type": ""
                    }
                ],
                "doc": {
                    "description": "Determine a given URL is for a paired AMP request.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.1"
                        },
                        {
                            "name": "param",
                            "content": "URL to examine. If empty, will use the current URL.",
                            "types": [
                                "string"
                            ],
                            "variable": "$url"
                        },
                        {
                            "name": "return",
                            "content": "True if the AMP query parameter is set with the required value, false if not.",
                            "types": [
                                "bool"
                            ]
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "methods": [
                        {
                            "name": "has_endpoint",
                            "class": "\\AmpProject\\AmpWP\\Services::get('paired_routing')",
                            "static": false,
                            "line": 2125,
                            "end_line": 2125
                        },
                        {
                            "name": "get",
                            "class": "\\AmpProject\\AmpWP\\Services",
                            "static": true,
                            "line": 2125,
                            "end_line": 2125
                        },
                        {
                            "name": "getMessage",
                            "class": "$e",
                            "static": false,
                            "line": 2132,
                            "end_line": 2132
                        }
                    ],
                    "functions": [
                        {
                            "name": "amp_is_enabled",
                            "line": 2127,
                            "end_line": 2127
                        },
                        {
                            "name": "__",
                            "line": 2128,
                            "end_line": 2128
                        },
                        {
                            "name": "__",
                            "line": 2130,
                            "end_line": 2130
                        },
                        {
                            "name": "_doing_it_wrong",
                            "line": 2132,
                            "end_line": 2132
                        },
                        {
                            "name": "esc_html",
                            "line": 2132,
                            "end_line": 2132
                        },
                        {
                            "name": "esc_html",
                            "line": 2132,
                            "end_line": 2132
                        }
                    ]
                }
            },
            "48": {
                "name": "amp_remove_paired_endpoint",
                "namespace": "global",
                "aliases": {
                    "ReaderThemes": "\\AmpProject\\AmpWP\\Admin\\ReaderThemes",
                    "AmpSlugCustomizationWatcher": "\\AmpProject\\AmpWP\\AmpSlugCustomizationWatcher",
                    "AmpWpPluginFactory": "\\AmpProject\\AmpWP\\AmpWpPluginFactory",
                    "InvalidService": "\\AmpProject\\AmpWP\\Exception\\InvalidService",
                    "Icon": "\\AmpProject\\AmpWP\\Icon",
                    "Option": "\\AmpProject\\AmpWP\\Option",
                    "QueryVar": "\\AmpProject\\AmpWP\\QueryVar",
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 2145,
                "end_line": 2157,
                "arguments": [
                    {
                        "name": "$url",
                        "default": null,
                        "type": ""
                    }
                ],
                "doc": {
                    "description": "Remove the paired AMP endpoint from a given URL.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.1"
                        },
                        {
                            "name": "param",
                            "content": "URL.",
                            "types": [
                                "string"
                            ],
                            "variable": "$url"
                        },
                        {
                            "name": "return",
                            "content": "URL with AMP stripped.",
                            "types": [
                                "string"
                            ]
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "methods": [
                        {
                            "name": "remove_endpoint",
                            "class": "\\AmpProject\\AmpWP\\Services::get('paired_routing')",
                            "static": false,
                            "line": 2147,
                            "end_line": 2147
                        },
                        {
                            "name": "get",
                            "class": "\\AmpProject\\AmpWP\\Services",
                            "static": true,
                            "line": 2147,
                            "end_line": 2147
                        },
                        {
                            "name": "getMessage",
                            "class": "$e",
                            "static": false,
                            "line": 2154,
                            "end_line": 2154
                        }
                    ],
                    "functions": [
                        {
                            "name": "amp_is_enabled",
                            "line": 2149,
                            "end_line": 2149
                        },
                        {
                            "name": "__",
                            "line": 2150,
                            "end_line": 2150
                        },
                        {
                            "name": "__",
                            "line": 2152,
                            "end_line": 2152
                        },
                        {
                            "name": "_doing_it_wrong",
                            "line": 2154,
                            "end_line": 2154
                        },
                        {
                            "name": "esc_html",
                            "line": 2154,
                            "end_line": 2154
                        },
                        {
                            "name": "esc_html",
                            "line": 2154,
                            "end_line": 2154
                        }
                    ]
                }
            }
        },
        "hooks": {
            "0": {
                "name": "amp_is_enabled",
                "line": 36,
                "end_line": 36,
                "type": "filter",
                "arguments": [
                    "true"
                ],
                "doc": {
                    "description": "Filters whether AMP is enabled on the current site.",
                    "long_description": "Useful if the plugin is network activated and you want to turn it off on select sites.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.2"
                        },
                        {
                            "name": "since",
                            "content": "2.0",
                            "description": "Filter now runs earlier at plugins_loaded (with earliest priority) rather than at the after_setup_theme action."
                        },
                        {
                            "name": "param",
                            "content": "Whether the AMP plugin's functionality should be enabled.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$enabled"
                        }
                    ]
                }
            },
            "1": {
                "name": "amp_init",
                "line": 124,
                "end_line": 124,
                "type": "action",
                "arguments": [],
                "doc": {
                    "description": "Triggers on init when AMP plugin is active.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.3"
                        }
                    ]
                }
            },
            "2": {
                "name": "amp_plugin_update",
                "line": 174,
                "end_line": 174,
                "type": "action",
                "arguments": [
                    "$old_version"
                ],
                "doc": {
                    "description": "Triggers when after amp_init when the plugin version has updated.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "param",
                            "content": "Old version.",
                            "types": [
                                "string"
                            ],
                            "variable": "$old_version"
                        }
                    ]
                }
            },
            "4": {
                "name": "amp_query_var",
                "line": 615,
                "end_line": 615,
                "type": "filter",
                "arguments": [
                    "defined('AMP_QUERY_VAR') ? AMP_QUERY_VAR : \\AmpProject\\AmpWP\\QueryVar::AMP"
                ],
                "doc": {
                    "description": "Filter the AMP query variable.",
                    "long_description": "Warning: This filter may become deprecated.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.3.2"
                        },
                        {
                            "name": "param",
                            "content": "The AMP query variable.",
                            "types": [
                                "string"
                            ],
                            "variable": "$query_var"
                        }
                    ]
                }
            },
            "5": {
                "name": "amp_frontend_show_canonical",
                "line": 720,
                "end_line": 733,
                "type": "filter_deprecated",
                "arguments": [
                    "array(true)",
                    "'2.0'",
                    "''",
                    "sprintf(esc_html__('Removal of %1$s link should be done by removing %2$s from the %3$s action at %4$s.', 'amp'), 'amphtml', __FUNCTION__ . '()', 'wp_head', 'template_redirect')"
                ],
                "doc": {
                    "description": "Filters whether to show the amphtml link on the frontend.",
                    "long_description": "This is deprecated since the name was wrong and the use case is not clear. To remove this from being printed, instead of using the filter you can rather do:\n     add_action( 'template_redirect', static function () {         remove_action( 'wp_head', 'amp_add_amphtml_link' );     } );",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.2"
                        },
                        {
                            "name": "deprecated",
                            "content": "Remove amp_add_amphtml_link() call on wp_head action instead.",
                            "description": "Remove amp_add_amphtml_link() call on wp_head action instead."
                        }
                    ]
                }
            },
            "6": {
                "name": "amp_bento_enabled",
                "line": 935,
                "end_line": 935,
                "type": "filter",
                "arguments": [
                    "false"
                ],
                "doc": {
                    "description": "Filters whether the use of Bento components is enabled.",
                    "long_description": "When Bento is enabled, newer experimental versions of AMP components are used which incorporate the next generation of the component framework.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.2"
                        },
                        {
                            "name": "link",
                            "content": "https:\/\/blog.amp.dev\/2021\/01\/28\/bento\/",
                            "link": "https:\/\/blog.amp.dev\/2021\/01\/28\/bento\/"
                        },
                        {
                            "name": "param",
                            "content": "Enabled.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$enabled"
                        }
                    ]
                }
            },
            "7": {
                "name": "amp_analytics_entries",
                "line": 1265,
                "end_line": 1265,
                "type": "filter",
                "arguments": [
                    "$analytics_entries"
                ],
                "doc": {
                    "description": "Add amp-analytics tags.",
                    "long_description": "This filter allows you to easily insert any amp-analytics tags without needing much heavy lifting. This filter should be used to alter entries for transitional mode.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.7"
                        },
                        {
                            "name": "param",
                            "content": "An associative array of the analytics entries we want to output. Each array entry must have a unique key, and the value should be an array with the following keys: `type`, `attributes`, `config_data`. See readme for more details.",
                            "types": [
                                "array"
                            ],
                            "variable": "$analytics_entries"
                        }
                    ]
                }
            },
            "8": {
                "name": "amp_print_analytics",
                "line": 1310,
                "end_line": 1310,
                "type": "action",
                "arguments": [
                    "$analytics_entries"
                ],
                "doc": {
                    "description": "Triggers before analytics entries are printed as amp-analytics tags.",
                    "long_description": "This is useful for printing additional `amp-analytics` tags to the page without having to refactor any existing markup generation logic to use the data structure mutated by the `amp_analytics_entries` filter. For such cases, this action should be used for printing `amp-analytics` tags as opposed to using the `wp_footer` and `amp_post_template_footer` actions.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.3"
                        },
                        {
                            "name": "param",
                            "content": "Analytics entries, already potentially modified by the amp_analytics_entries filter.",
                            "types": [
                                "array"
                            ],
                            "variable": "$analytics_entries"
                        }
                    ]
                }
            },
            "9": {
                "name": "amp_content_embed_handlers",
                "line": 1387,
                "end_line": 1414,
                "type": "filter",
                "arguments": [
                    "array(\\AMP_Core_Block_Handler::class => array(), \\AMP_Twitter_Embed_Handler::class => array(), \\AMP_YouTube_Embed_Handler::class => array(), \\AMP_Crowdsignal_Embed_Handler::class => array(), \\AMP_DailyMotion_Embed_Handler::class => array(), \\AMP_Vimeo_Embed_Handler::class => array(), \\AMP_SoundCloud_Embed_Handler::class => array(), \\AMP_Instagram_Embed_Handler::class => array(), \\AMP_Issuu_Embed_Handler::class => array(), \\AMP_Meetup_Embed_Handler::class => array(), \\AMP_Facebook_Embed_Handler::class => array(), \\AMP_Pinterest_Embed_Handler::class => array(), \\AMP_Playlist_Embed_Handler::class => array(), \\AMP_Reddit_Embed_Handler::class => array(), \\AMP_TikTok_Embed_Handler::class => array(), \\AMP_Tumblr_Embed_Handler::class => array(), \\AMP_Gallery_Embed_Handler::class => array(), \\AMP_Gfycat_Embed_Handler::class => array(), \\AMP_Imgur_Embed_Handler::class => array(), \\AMP_Scribd_Embed_Handler::class => array(), \\AMP_WordPress_Embed_Handler::class => array(), \\AMP_WordPress_TV_Embed_Handler::class => array())",
                    "$post"
                ],
                "doc": {
                    "description": "Filters the content embed handlers.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.2"
                        },
                        {
                            "name": "since",
                            "content": "0.7",
                            "description": "Deprecated $post parameter."
                        },
                        {
                            "name": "param",
                            "content": "Handlers.",
                            "types": [
                                "array"
                            ],
                            "variable": "$handlers"
                        },
                        {
                            "name": "param",
                            "content": "Post. Deprecated. It will be null when `amp_is_canonical()`.",
                            "types": [
                                "\\WP_Post"
                            ],
                            "variable": "$post"
                        }
                    ]
                }
            },
            "10": {
                "name": "amp_dev_mode_enabled",
                "line": 1440,
                "end_line": 1450,
                "type": "filter",
                "arguments": [
                    "is_admin_bar_showing() && is_user_logged_in() || is_customize_preview()"
                ],
                "doc": {
                    "description": "Filters whether AMP mode is enabled.",
                    "long_description": "When enabled, the data-ampdevmode attribute will be added to the document element and it will allow the attributes to be added to the admin bar. It will also add the attribute to all elements which match the queries for the expressions returned by the 'amp_dev_mode_element_xpaths' filter.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.3"
                        },
                        {
                            "name": "param",
                            "content": "Whether AMP dev mode is enabled.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$is_dev_mode_enabled"
                        }
                    ]
                }
            },
            "11": {
                "name": "amp_native_img_used",
                "line": 1474,
                "end_line": 1474,
                "type": "filter",
                "arguments": [
                    "$use_native_img_tag"
                ],
                "doc": {
                    "description": "Filters whether to use the native `img` element rather than convert to `amp-img`.",
                    "long_description": "This filter is a feature flag to opt-in to discontinue using `amp-img` (and `amp-anim`) which will be deprecated in AMP in the near future. Once this lands in AMP, this filter will switch to defaulting to true instead of false.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.2"
                        },
                        {
                            "name": "link",
                            "content": "https:\/\/github.com\/ampproject\/amphtml\/issues\/30442",
                            "link": "https:\/\/github.com\/ampproject\/amphtml\/issues\/30442"
                        },
                        {
                            "name": "param",
                            "content": "Whether to use `img`.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$use_native"
                        }
                    ]
                }
            },
            "12": {
                "name": "amp_to_amp_linking_enabled",
                "line": 1516,
                "end_line": 1519,
                "type": "filter",
                "arguments": [
                    "\\AMP_Theme_Support::TRANSITIONAL_MODE_SLUG === \\AMP_Options_Manager::get_option(\\AmpProject\\AmpWP\\Option::THEME_SUPPORT)"
                ],
                "doc": {
                    "description": "Filters whether AMP-to-AMP linking should be enabled.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.4.0"
                        },
                        {
                            "name": "param",
                            "content": "Whether AMP-to-AMP linking should be enabled.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$amp_to_amp_linking_enabled"
                        }
                    ]
                }
            },
            "13": {
                "name": "amp_to_amp_excluded_urls",
                "line": 1609,
                "end_line": 1609,
                "type": "filter",
                "arguments": [
                    "array()"
                ],
                "doc": {
                    "description": "Filters the list of URLs which are excluded from being included in AMP-to-AMP linking.",
                    "long_description": "This only applies when the amp_to_amp_linking_enabled filter returns true, which it does by default in Transitional mode. This filter can be used to opt-in when in Reader mode. This does not apply in Standard mode. Only frontend URLs on the frontend need be excluded, as all other URLs are never made into AMP links.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.5.0"
                        },
                        {
                            "name": "param",
                            "content": "The URLs to exclude from having AMP-to-AMP links.",
                            "types": [
                                "string[]"
                            ],
                            "variable": "$excluded_urls"
                        }
                    ]
                }
            },
            "14": {
                "name": "amp_auto_lightbox_disabled",
                "line": 1627,
                "end_line": 1627,
                "type": "filter",
                "arguments": [
                    "true"
                ],
                "doc": {
                    "description": "Filters whether AMP auto-lightbox is disabled.",
                    "long_description": "When disabled, the data-amp-auto-lightbox-disable attribute is added to the body.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.2.2"
                        },
                        {
                            "name": "link",
                            "content": "https:\/\/github.com\/ampproject\/amphtml\/blob\/420bc3987f69f6d9cd36e31c013fc9eea4f1b245\/docs\/spec\/auto-lightbox.md#disabling-treatment-explicitly",
                            "link": "https:\/\/github.com\/ampproject\/amphtml\/blob\/420bc3987f69f6d9cd36e31c013fc9eea4f1b245\/docs\/spec\/auto-lightbox.md#disabling-treatment-explicitly"
                        },
                        {
                            "name": "param",
                            "content": "Whether disabled.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$disabled"
                        }
                    ]
                }
            },
            "15": {
                "name": "amp_content_sanitizers",
                "line": 1642,
                "end_line": 1642,
                "type": "filter",
                "arguments": [
                    "$sanitizers",
                    "$post"
                ],
                "doc": {
                    "description": "Filters the content sanitizers.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.2"
                        },
                        {
                            "name": "since",
                            "content": "0.7",
                            "description": "Deprecated $post parameter. It will be null when `amp_is_canonical()`."
                        },
                        {
                            "name": "param",
                            "content": "Handlers.",
                            "types": [
                                "array"
                            ],
                            "variable": "$handlers"
                        },
                        {
                            "name": "param",
                            "content": "Post. Deprecated.",
                            "types": [
                                "\\WP_Post"
                            ],
                            "variable": "$post"
                        }
                    ]
                }
            },
            "16": {
                "name": "amp_dev_mode_element_xpaths",
                "line": 1655,
                "end_line": 1655,
                "type": "filter",
                "arguments": [
                    "array()"
                ],
                "doc": {
                    "description": "Filters the XPath queries for elements that should be enabled for dev mode.",
                    "long_description": "By supplying XPath queries to this filter, the data-ampdevmode attribute will automatically be added to the root HTML element as well as to any elements that match the expressions. The attribute is added to the elements prior to running any of the sanitizers.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.3"
                        },
                        {
                            "name": "param",
                            "content": "XPath element queries. Context is the root element.",
                            "types": [
                                "string[]"
                            ],
                            "variable": "$element_xpaths"
                        }
                    ]
                }
            },
            "17": {
                "name": "amp_parsed_css_transient_caching_allowed",
                "line": 1708,
                "end_line": 1708,
                "type": "filter",
                "arguments": [
                    "true"
                ],
                "doc": {
                    "description": "Filters whether parsed CSS is allowed to be cached in transients.",
                    "long_description": "When this is filtered to be false, parsed CSS will not be stored in transients. This is important when there is highly-variable CSS content in order to prevent filling up the wp_options table with an endless number of entries.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.5.0"
                        },
                        {
                            "name": "param",
                            "content": "Transient caching allowed.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$transient_caching_allowed"
                        }
                    ]
                }
            },
            "18": {
                "name": "amp_site_icon_url",
                "line": 1858,
                "end_line": 1858,
                "type": "filter",
                "arguments": [
                    "$logo_image_url"
                ],
                "doc": {
                    "description": "Filters the publisher logo URL in the schema.org data.",
                    "long_description": "Previously, this only filtered the Site Icon, as that was the only possible schema.org publisher logo. But the Custom Logo is now the preferred publisher logo, if it exists and its dimensions aren't too big.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.3"
                        },
                        {
                            "name": "param",
                            "content": "URL of the publisher logo, either the Custom Logo or the Site Icon.",
                            "types": [
                                "string"
                            ],
                            "variable": "$schema_img_url"
                        }
                    ]
                }
            },
            "19": {
                "name": "amp_post_template_metadata",
                "line": 1939,
                "end_line": 1939,
                "type": "filter",
                "arguments": [
                    "$metadata",
                    "$queried_object"
                ],
                "doc": {
                    "description": "Filters Schema.org metadata for a post.",
                    "long_description": "The 'post_template' in the filter name here is due to this filter originally being introduced in `AMP_Post_Template`. In general the `amp_schemaorg_metadata` filter should be used instead.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.3"
                        },
                        {
                            "name": "param",
                            "content": "Metadata.",
                            "types": [
                                "array"
                            ],
                            "variable": "$metadata"
                        },
                        {
                            "name": "param",
                            "content": "Post.",
                            "types": [
                                "\\WP_Post"
                            ],
                            "variable": "$queried_object"
                        }
                    ]
                }
            },
            "20": {
                "name": "amp_schemaorg_metadata",
                "line": 1953,
                "end_line": 1953,
                "type": "filter",
                "arguments": [
                    "$metadata"
                ],
                "doc": {
                    "description": "Filters Schema.org metadata for a query.",
                    "long_description": "Check the the main query for the context for which metadata should be added.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.7"
                        },
                        {
                            "name": "param",
                            "content": "Metadata.",
                            "types": [
                                "array"
                            ],
                            "variable": "$metadata"
                        }
                    ]
                }
            }
        }
    },
    "17": {
        "file": {
            "description": "Callbacks for adding content to an AMP template.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/amp-post-template-functions.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "functions": [],
        "hooks": [
            {
                "name": "amp_post_template_analytics",
                "line": 154,
                "end_line": 154,
                "type": "filter",
                "arguments": [
                    "$analytics",
                    "get_queried_object()"
                ],
                "doc": {
                    "description": "Add amp-analytics tags.",
                    "long_description": "This filter allows you to easily insert any amp-analytics tags without needing much heavy lifting. This filter should be used to alter entries for legacy AMP templates.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.4"
                        },
                        {
                            "name": "param",
                            "content": "An associative array of the analytics entries we want to output. Each array entry must have a unique key, and the value should be an array with the following keys: `type`, `attributes`, `script_data`. See readme for more details.",
                            "types": [
                                "array"
                            ],
                            "variable": "$analytics"
                        },
                        {
                            "name": "param",
                            "content": "The current post.",
                            "types": [
                                "\\WP_Post"
                            ],
                            "variable": "$post"
                        }
                    ]
                }
            }
        ]
    },
    "21": {
        "file": {
            "description": "Class AMP_HTTP",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.0"
                },
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/class-amp-http.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [],
        "hooks": [
            {
                "name": "amp_comment_posted_message",
                "line": 502,
                "end_line": 502,
                "type": "filter",
                "arguments": [
                    "$message",
                    "$comment"
                ],
                "doc": {
                    "description": "Filters the message when comment submitted success message when",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.7"
                        }
                    ]
                }
            }
        ]
    },
    "22": {
        "file": {
            "description": "AMP Post type support.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                },
                {
                    "name": "since",
                    "content": "0.6"
                }
            ]
        },
        "path": "includes\/class-amp-post-type-support.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [],
        "hooks": [
            {
                "name": "amp_supportable_post_types",
                "line": 58,
                "end_line": 58,
                "type": "filter",
                "arguments": [
                    "$post_types"
                ],
                "doc": {
                    "description": "Filters the list of post types which may be supported for AMP.",
                    "long_description": "By default the list includes those which are public.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.0"
                        },
                        {
                            "name": "param",
                            "content": "Post types.",
                            "types": [
                                "string[]"
                            ],
                            "variable": "$post_types"
                        }
                    ]
                }
            },
            {
                "name": "amp_skip_post",
                "line": 141,
                "end_line": 141,
                "type": "filter",
                "arguments": [
                    "false",
                    "$post->ID",
                    "$post"
                ],
                "doc": {
                    "description": "Filters whether to skip the post from AMP.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.3"
                        },
                        {
                            "name": "param",
                            "content": "Skipped.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$skipped"
                        },
                        {
                            "name": "param",
                            "content": "Post ID.",
                            "types": [
                                "int"
                            ],
                            "variable": "$post_id"
                        },
                        {
                            "name": "param",
                            "content": "Post.",
                            "types": [
                                "\\WP_Post"
                            ],
                            "variable": "$post"
                        }
                    ]
                }
            },
            {
                "name": "amp_post_status_default_enabled",
                "line": 191,
                "end_line": 191,
                "type": "filter",
                "arguments": [
                    "$enabled",
                    "$post"
                ],
                "doc": {
                    "description": "Filters whether default AMP status should be enabled or not.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.6"
                        },
                        {
                            "name": "param",
                            "content": "Status.",
                            "types": [
                                "string"
                            ],
                            "variable": "$status"
                        },
                        {
                            "name": "param",
                            "content": "Post.",
                            "types": [
                                "\\WP_Post"
                            ],
                            "variable": "$post"
                        }
                    ]
                }
            }
        ]
    },
    "24": {
        "file": {
            "description": "Class AMP_Theme_Support",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/class-amp-theme-support.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [],
        "hooks": {
            "1": {
                "name": "amp_supportable_templates",
                "line": 805,
                "end_line": 805,
                "type": "filter",
                "arguments": [
                    "$templates"
                ],
                "doc": {
                    "description": "Filters list of supportable templates.",
                    "long_description": "Each array item should have a key that corresponds to a template conditional function. If the key is such a function, then the key is used to evaluate whether the given template entry is a match. Otherwise, a supportable template item can include a callback value which is used instead. Each item needs a 'label' value. Additionally, if the supportable template is a subset of another condition (e.g. is_singular > is_single) then this relationship needs to be indicated via the 'parent' value.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.0"
                        },
                        {
                            "name": "param",
                            "content": "Supportable templates.",
                            "types": [
                                "array"
                            ],
                            "variable": "$templates"
                        }
                    ]
                }
            },
            "9": {
                "name": "amp_enable_optimizer",
                "line": 2104,
                "end_line": 2104,
                "type": "filter",
                "arguments": [
                    "$enable_optimizer"
                ],
                "doc": {
                    "description": "Filter whether the generated HTML output should be run through the AMP Optimizer or not.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.5.0"
                        },
                        {
                            "name": "param",
                            "content": "Whether the generated HTML output should be run through the AMP Optimizer or not.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$enable_optimizer"
                        }
                    ]
                }
            }
        }
    },
    "25": {
        "file": {
            "description": "Deprecated functions.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/deprecated.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "includes": [
            {
                "name": "",
                "line": 94,
                "type": "Require Once"
            }
        ],
        "functions": {
            "1": {
                "name": "amp_maybe_add_actions",
                "namespace": "global",
                "aliases": {
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 34,
                "end_line": 83,
                "arguments": [],
                "doc": {
                    "description": "Conditionally add AMP actions or render the transitional mode template(s).",
                    "long_description": "If the request is for an AMP page and this is in 'canonical mode,' redirect to the non-AMP page. It won't need this plugin's template system, nor the frontend actions like the 'rel' link.",
                    "tags": [
                        {
                            "name": "codeCoverageIgnore",
                            "content": ""
                        },
                        {
                            "name": "deprecated",
                            "content": "This function is not used when 'amp' theme support is added.",
                            "description": "This function is not used when 'amp' theme support is added."
                        },
                        {
                            "name": "global",
                            "content": "WP_Query $wp_query"
                        },
                        {
                            "name": "since",
                            "content": "0.2"
                        },
                        {
                            "name": "return",
                            "content": "",
                            "types": [
                                "void"
                            ]
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "functions": [
                        {
                            "name": "_deprecated_function",
                            "line": 35,
                            "end_line": 35,
                            "deprecation_version": "1.5"
                        },
                        {
                            "name": "current_theme_supports",
                            "line": 38,
                            "end_line": 38
                        },
                        {
                            "name": "is_singular",
                            "line": 44,
                            "end_line": 44
                        },
                        {
                            "name": "is_feed",
                            "line": 44,
                            "end_line": 44
                        },
                        {
                            "name": "amp_is_request",
                            "line": 48,
                            "end_line": 48
                        },
                        {
                            "name": "get_queried_object",
                            "line": 55,
                            "end_line": 55
                        },
                        {
                            "name": "amp_is_post_supported",
                            "line": 56,
                            "end_line": 56
                        },
                        {
                            "name": "wp_safe_redirect",
                            "line": 62,
                            "end_line": 62
                        },
                        {
                            "name": "get_permalink",
                            "line": 62,
                            "end_line": 62
                        },
                        {
                            "name": "current_user_can",
                            "line": 62,
                            "end_line": 62
                        },
                        {
                            "name": "wp_parse_str",
                            "line": 73,
                            "end_line": 73
                        },
                        {
                            "name": "amp_get_slug",
                            "line": 74,
                            "end_line": 74
                        },
                        {
                            "name": "amp_get_slug",
                            "line": 74,
                            "end_line": 74
                        },
                        {
                            "name": "wp_safe_redirect",
                            "line": 75,
                            "end_line": 75
                        },
                        {
                            "name": "amp_get_permalink",
                            "line": 75,
                            "end_line": 75
                        },
                        {
                            "name": "amp_prepare_render",
                            "line": 79,
                            "end_line": 79
                        },
                        {
                            "name": "amp_add_frontend_actions",
                            "line": 81,
                            "end_line": 81
                        }
                    ]
                }
            },
            "2": {
                "name": "amp_add_post_template_actions",
                "namespace": "global",
                "aliases": {
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 92,
                "end_line": 96,
                "arguments": [],
                "doc": {
                    "description": "Add post template actions.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.2"
                        },
                        {
                            "name": "codeCoverageIgnore",
                            "content": ""
                        },
                        {
                            "name": "deprecated",
                            "content": "This function is not used when 'amp' theme support is added.",
                            "description": "This function is not used when 'amp' theme support is added."
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "functions": [
                        {
                            "name": "_deprecated_function",
                            "line": 93,
                            "end_line": 93,
                            "deprecation_version": "1.5"
                        },
                        {
                            "name": "amp_post_template_init_hooks",
                            "line": 95,
                            "end_line": 95
                        }
                    ]
                }
            },
            "3": {
                "name": "amp_prepare_render",
                "namespace": "global",
                "aliases": {
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 106,
                "end_line": 109,
                "arguments": [],
                "doc": {
                    "description": "Add action to do post template rendering at template_redirect action.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.2"
                        },
                        {
                            "name": "since",
                            "content": "1.0",
                            "description": "The amp_render() function is called at template_redirect action priority 11 instead of priority 10."
                        },
                        {
                            "name": "codeCoverageIgnore",
                            "content": ""
                        },
                        {
                            "name": "deprecated",
                            "content": "This function is not used when 'amp' theme support is added.",
                            "description": "This function is not used when 'amp' theme support is added."
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "functions": [
                        {
                            "name": "_deprecated_function",
                            "line": 107,
                            "end_line": 107,
                            "deprecation_version": "1.5"
                        },
                        {
                            "name": "add_action",
                            "line": 108,
                            "end_line": 108
                        }
                    ]
                }
            },
            "4": {
                "name": "amp_render",
                "namespace": "global",
                "aliases": {
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 118,
                "end_line": 127,
                "arguments": [],
                "doc": {
                    "description": "Render AMP for queried post.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.1"
                        },
                        {
                            "name": "codeCoverageIgnore",
                            "content": ""
                        },
                        {
                            "name": "deprecated",
                            "content": "This function is not used when 'amp' theme support is added.",
                            "description": "This function is not used when 'amp' theme support is added."
                        }
                    ]
                },
                "hooks": [],
                "uses": {
                    "functions": [
                        {
                            "name": "_deprecated_function",
                            "line": 119,
                            "end_line": 119,
                            "deprecation_version": "1.5"
                        },
                        {
                            "name": "get_queried_object",
                            "line": 122,
                            "end_line": 122
                        },
                        {
                            "name": "amp_render_post",
                            "line": 124,
                            "end_line": 124
                        }
                    ]
                }
            },
            "5": {
                "name": "amp_render_post",
                "namespace": "global",
                "aliases": {
                    "Services": "\\AmpProject\\AmpWP\\Services"
                },
                "line": 139,
                "end_line": 185,
                "arguments": [
                    {
                        "name": "$post",
                        "default": null,
                        "type": ""
                    }
                ],
                "doc": {
                    "description": "Render AMP post template.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.5"
                        },
                        {
                            "name": "codeCoverageIgnore",
                            "content": ""
                        },
                        {
                            "name": "deprecated",
                            "content": "Rendering a post is now handled by AMP_Theme_Support.",
                            "description": "Rendering a post is now handled by AMP_Theme_Support."
                        },
                        {
                            "name": "param",
                            "content": "Post.",
                            "types": [
                                "\\WP_Post",
                                "int"
                            ],
                            "variable": "$post"
                        },
                        {
                            "name": "global",
                            "content": "WP_Query $wp_query"
                        }
                    ]
                },
                "hooks": [
                    {
                        "name": "pre_amp_render_post",
                        "line": 176,
                        "end_line": 176,
                        "type": "action",
                        "arguments": [
                            "$post_id"
                        ],
                        "doc": {
                            "description": "Fires before rendering a post in AMP.",
                            "long_description": "This action is not triggered when 'amp' theme support is present. Instead, you should use 'template_redirect' action and check if `amp_is_request()`.",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.2"
                                },
                                {
                                    "name": "deprecated",
                                    "content": "Check amp_is_request() on the template_redirect action instead.",
                                    "description": "Check amp_is_request() on the template_redirect action instead."
                                },
                                {
                                    "name": "param",
                                    "content": "Post ID.",
                                    "types": [
                                        "int"
                                    ],
                                    "variable": "$post_id"
                                }
                            ]
                        }
                    }
                ],
                "uses": {
                    "functions": [
                        {
                            "name": "_deprecated_function",
                            "line": 140,
                            "end_line": 140,
                            "deprecation_version": "1.5"
                        },
                        {
                            "name": "get_post",
                            "line": 144,
                            "end_line": 144
                        },
                        {
                            "name": "amp_get_slug",
                            "line": 156,
                            "end_line": 156
                        },
                        {
                            "name": "amp_get_slug",
                            "line": 158,
                            "end_line": 158
                        },
                        {
                            "name": "extension_loaded",
                            "line": 162,
                            "end_line": 162
                        },
                        {
                            "name": "newrelic_disable_autorum",
                            "line": 163,
                            "end_line": 163
                        },
                        {
                            "name": "do_action",
                            "line": 176,
                            "end_line": 176
                        },
                        {
                            "name": "amp_add_post_template_actions",
                            "line": 178,
                            "end_line": 178
                        },
                        {
                            "name": "amp_get_slug",
                            "line": 183,
                            "end_line": 183
                        }
                    ],
                    "methods": [
                        {
                            "name": "__construct",
                            "class": "\\AMP_Post_Template",
                            "static": false,
                            "line": 179,
                            "end_line": 179
                        },
                        {
                            "name": "load",
                            "class": "$template",
                            "static": false,
                            "line": 180,
                            "end_line": 180
                        }
                    ]
                }
            }
        },
        "hooks": [
            {
                "name": "pre_amp_render_post",
                "line": 176,
                "end_line": 176,
                "type": "action",
                "arguments": [
                    "$post_id"
                ],
                "doc": {
                    "description": "Fires before rendering a post in AMP.",
                    "long_description": "This action is not triggered when 'amp' theme support is present. Instead, you should use 'template_redirect' action and check if `amp_is_request()`.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.2"
                        },
                        {
                            "name": "deprecated",
                            "content": "Check amp_is_request() on the template_redirect action instead.",
                            "description": "Check amp_is_request() on the template_redirect action instead."
                        },
                        {
                            "name": "param",
                            "content": "Post ID.",
                            "types": [
                                "int"
                            ],
                            "variable": "$post_id"
                        }
                    ]
                }
            }
        ]
    },
    "29": {
        "file": {
            "description": "Class AMP_Base_Embed_Handler",
            "long_description": "Used by some children.",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/embeds\/class-amp-base-embed-handler.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [
            {
                "name": "AMP_Base_Embed_Handler",
                "namespace": "global",
                "line": 20,
                "end_line": 240,
                "final": false,
                "abstract": true,
                "extends": "",
                "implements": [],
                "properties": [
                    {
                        "name": "$DEFAULT_WIDTH",
                        "line": 28,
                        "end_line": 28,
                        "default": "600",
                        "static": false,
                        "visibility": "protected",
                        "doc": {
                            "description": "Default width.",
                            "long_description": "In some cases, this may be the string 'auto' when a fixed-height layout is used.",
                            "tags": [
                                {
                                    "name": "var",
                                    "content": "",
                                    "types": [
                                        "int",
                                        "string"
                                    ],
                                    "variable": ""
                                }
                            ]
                        }
                    },
                    {
                        "name": "$DEFAULT_HEIGHT",
                        "line": 35,
                        "end_line": 35,
                        "default": "480",
                        "static": false,
                        "visibility": "protected",
                        "doc": {
                            "description": "Default height.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "var",
                                    "content": "",
                                    "types": [
                                        "int"
                                    ],
                                    "variable": ""
                                }
                            ]
                        }
                    },
                    {
                        "name": "$args",
                        "line": 42,
                        "end_line": 42,
                        "default": "array()",
                        "static": false,
                        "visibility": "protected",
                        "doc": {
                            "description": "Default arguments.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "var",
                                    "content": "",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": ""
                                }
                            ]
                        }
                    },
                    {
                        "name": "$did_convert_elements",
                        "line": 49,
                        "end_line": 49,
                        "default": "false",
                        "static": false,
                        "visibility": "protected",
                        "doc": {
                            "description": "Whether or not conversion was completed.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "var",
                                    "content": "",
                                    "types": [
                                        "boolean"
                                    ],
                                    "variable": ""
                                }
                            ]
                        }
                    }
                ],
                "methods": [
                    {
                        "name": "register_embed",
                        "namespace": "",
                        "aliases": {
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Attribute": "\\AmpProject\\Html\\Attribute",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 54,
                        "end_line": 54,
                        "final": false,
                        "abstract": true,
                        "static": false,
                        "visibility": "public",
                        "arguments": [],
                        "doc": {
                            "description": "Registers embed.",
                            "long_description": "",
                            "tags": []
                        }
                    },
                    {
                        "name": "unregister_embed",
                        "namespace": "",
                        "aliases": {
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Attribute": "\\AmpProject\\Html\\Attribute",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 59,
                        "end_line": 59,
                        "final": false,
                        "abstract": true,
                        "static": false,
                        "visibility": "public",
                        "arguments": [],
                        "doc": {
                            "description": "Unregisters embed.",
                            "long_description": "",
                            "tags": []
                        }
                    },
                    {
                        "name": "__construct",
                        "namespace": "",
                        "aliases": {
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Attribute": "\\AmpProject\\Html\\Attribute",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 66,
                        "end_line": 74,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$args",
                                "default": "array()",
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Constructor.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "Height and width for embed.",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$args"
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "wp_parse_args",
                                    "line": 67,
                                    "end_line": 73
                                }
                            ]
                        }
                    },
                    {
                        "name": "get_scripts",
                        "namespace": "",
                        "aliases": {
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Attribute": "\\AmpProject\\Html\\Attribute",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 86,
                        "end_line": 88,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [],
                        "doc": {
                            "description": "Get mapping of AMP component names to AMP script URLs.",
                            "long_description": "This is normally no longer needed because the validating sanitizer will automatically detect the need for them via the spec.",
                            "tags": [
                                {
                                    "name": "see",
                                    "content": "",
                                    "refers": "AMP_Tag_And_Attribute_Sanitizer::get_scripts()"
                                },
                                {
                                    "name": "return",
                                    "content": "Scripts.",
                                    "types": [
                                        "array"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "match_element_attributes",
                        "namespace": "",
                        "aliases": {
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Attribute": "\\AmpProject\\Html\\Attribute",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 101,
                        "end_line": 119,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "protected",
                        "arguments": [
                            {
                                "name": "$html",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$tag_name",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$attribute_names",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Get regex pattern for matching HTML attributes from a given tag name.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "1.5.0"
                                },
                                {
                                    "name": "todo",
                                    "content": "This does not currently work with single-quoted attribute values or non-quoted attributes."
                                },
                                {
                                    "name": "param",
                                    "content": "HTML source haystack.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$html"
                                },
                                {
                                    "name": "param",
                                    "content": "Tag name.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$tag_name"
                                },
                                {
                                    "name": "param",
                                    "content": "Attribute names.",
                                    "types": [
                                        "string[]"
                                    ],
                                    "variable": "$attribute_names"
                                },
                                {
                                    "name": "return",
                                    "content": "Matched attributes, or null if the element was not matched at all.",
                                    "types": [
                                        "string[]",
                                        "null"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "sprintf",
                                    "line": 102,
                                    "end_line": 114
                                },
                                {
                                    "name": "preg_quote",
                                    "line": 104,
                                    "end_line": 104
                                },
                                {
                                    "name": "implode",
                                    "line": 105,
                                    "end_line": 113
                                },
                                {
                                    "name": "array_map",
                                    "line": 107,
                                    "end_line": 112
                                },
                                {
                                    "name": "sprintf",
                                    "line": 109,
                                    "end_line": 109
                                },
                                {
                                    "name": "preg_quote",
                                    "line": 109,
                                    "end_line": 109
                                },
                                {
                                    "name": "preg_match",
                                    "line": 115,
                                    "end_line": 115
                                },
                                {
                                    "name": "wp_array_slice_assoc",
                                    "line": 118,
                                    "end_line": 118
                                }
                            ]
                        }
                    },
                    {
                        "name": "get_child_elements",
                        "namespace": "",
                        "aliases": {
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Attribute": "\\AmpProject\\Html\\Attribute",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 129,
                        "end_line": 136,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "protected",
                        "arguments": [
                            {
                                "name": "$node",
                                "default": null,
                                "type": "\\DOMElement"
                            }
                        ],
                        "doc": {
                            "description": "Get all child elements of the specified element.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "2.0.6"
                                },
                                {
                                    "name": "param",
                                    "content": "Element.",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": "$node"
                                },
                                {
                                    "name": "return",
                                    "content": "Array of child elements for specified element.",
                                    "types": [
                                        "\\DOMElement[]"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "array_filter",
                                    "line": 130,
                                    "end_line": 135
                                },
                                {
                                    "name": "iterator_to_array",
                                    "line": 131,
                                    "end_line": 131
                                }
                            ]
                        }
                    },
                    {
                        "name": "unwrap_p_element",
                        "namespace": "",
                        "aliases": {
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Attribute": "\\AmpProject\\Html\\Attribute",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 148,
                        "end_line": 161,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "protected",
                        "arguments": [
                            {
                                "name": "$node",
                                "default": null,
                                "type": "\\DOMElement"
                            }
                        ],
                        "doc": {
                            "description": "Replace an element's parent with itself if the parent is a <p> tag which has no attributes and has no other children.",
                            "long_description": "This usually happens while `wpautop()` processes the element.",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "2.0.6"
                                },
                                {
                                    "name": "see",
                                    "content": "",
                                    "refers": "AMP_Tag_And_Attribute_Sanitizer::remove_node()"
                                },
                                {
                                    "name": "param",
                                    "content": "Node.",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": "$node"
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "hasAttributes",
                                    "class": "$parent_node",
                                    "static": false,
                                    "line": 155,
                                    "end_line": 155
                                },
                                {
                                    "name": "get_child_elements",
                                    "class": "\\AMP_Base_Embed_Handler",
                                    "static": false,
                                    "line": 157,
                                    "end_line": 157
                                },
                                {
                                    "name": "replaceChild",
                                    "class": "$parent_node->parentNode",
                                    "static": false,
                                    "line": 159,
                                    "end_line": 159
                                }
                            ],
                            "functions": [
                                {
                                    "name": "count",
                                    "line": 157,
                                    "end_line": 157
                                }
                            ]
                        }
                    },
                    {
                        "name": "maybe_remove_script_sibling",
                        "namespace": "",
                        "aliases": {
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Attribute": "\\AmpProject\\Html\\Attribute",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 171,
                        "end_line": 208,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "protected",
                        "arguments": [
                            {
                                "name": "$node",
                                "default": null,
                                "type": "\\DOMElement"
                            },
                            {
                                "name": "$match_callback",
                                "default": null,
                                "type": "callable"
                            }
                        ],
                        "doc": {
                            "description": "Removes the node's nearest `<script>` sibling with a `src` attribute containing the base `src` URL provided.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "2.1"
                                },
                                {
                                    "name": "param",
                                    "content": "The DOMNode to whose sibling is the script to be removed.",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": "$node"
                                },
                                {
                                    "name": "param",
                                    "content": "Callback which is passed the script element to determine if it is a match.",
                                    "types": [
                                        "callable"
                                    ],
                                    "variable": "$match_callback"
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "match_callback",
                                    "line": 181,
                                    "end_line": 181
                                },
                                {
                                    "name": "array_values",
                                    "line": 189,
                                    "end_line": 196
                                },
                                {
                                    "name": "array_filter",
                                    "line": 190,
                                    "end_line": 195
                                },
                                {
                                    "name": "iterator_to_array",
                                    "line": 191,
                                    "end_line": 191
                                },
                                {
                                    "name": "count",
                                    "line": 199,
                                    "end_line": 199
                                },
                                {
                                    "name": "match_callback",
                                    "line": 203,
                                    "end_line": 203
                                }
                            ],
                            "methods": [
                                {
                                    "name": "removeChild",
                                    "class": "$next_element_sibling->parentNode",
                                    "static": false,
                                    "line": 182,
                                    "end_line": 182
                                },
                                {
                                    "name": "removeChild",
                                    "class": "$next_element_sibling->parentNode",
                                    "static": false,
                                    "line": 205,
                                    "end_line": 205
                                }
                            ]
                        }
                    },
                    {
                        "name": "create_overflow_button_element",
                        "namespace": "",
                        "aliases": {
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Attribute": "\\AmpProject\\Html\\Attribute",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 217,
                        "end_line": 226,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "protected",
                        "arguments": [
                            {
                                "name": "$dom",
                                "default": null,
                                "type": "\\AmpProject\\Dom\\Document"
                            },
                            {
                                "name": "$text",
                                "default": "null",
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Create overflow button element.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "Document.",
                                    "types": [
                                        "\\AmpProject\\Dom\\Document"
                                    ],
                                    "variable": "$dom"
                                },
                                {
                                    "name": "param",
                                    "content": "Button text (optional).",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$text"
                                },
                                {
                                    "name": "return",
                                    "content": "Button element.",
                                    "types": [
                                        "\\AmpProject\\Dom\\Element"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "__",
                                    "line": 219,
                                    "end_line": 219
                                }
                            ],
                            "methods": [
                                {
                                    "name": "createElement",
                                    "class": "$dom",
                                    "static": false,
                                    "line": 221,
                                    "end_line": 221
                                },
                                {
                                    "name": "setAttributeNode",
                                    "class": "$overflow",
                                    "static": false,
                                    "line": 222,
                                    "end_line": 222
                                },
                                {
                                    "name": "createAttribute",
                                    "class": "$dom",
                                    "static": false,
                                    "line": 222,
                                    "end_line": 222
                                },
                                {
                                    "name": "setAttribute",
                                    "class": "$overflow",
                                    "static": false,
                                    "line": 223,
                                    "end_line": 223
                                }
                            ]
                        }
                    },
                    {
                        "name": "create_overflow_button_markup",
                        "namespace": "",
                        "aliases": {
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Attribute": "\\AmpProject\\Html\\Attribute",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 234,
                        "end_line": 239,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "protected",
                        "arguments": [
                            {
                                "name": "$text",
                                "default": "null",
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Create overflow button markup.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "Button text (optional).",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$text"
                                },
                                {
                                    "name": "return",
                                    "content": "Button markup.",
                                    "types": [
                                        "string"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "__",
                                    "line": 236,
                                    "end_line": 236
                                },
                                {
                                    "name": "sprintf",
                                    "line": 238,
                                    "end_line": 238
                                },
                                {
                                    "name": "esc_html",
                                    "line": 238,
                                    "end_line": 238
                                }
                            ]
                        }
                    }
                ],
                "doc": {
                    "description": "Class AMP_Base_Embed_Handler",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.2"
                        }
                    ]
                }
            }
        ],
        "hooks": []
    },
    "49": {
        "file": {
            "description": "Class AMP_WordPress_Embed_Handler",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/embeds\/class-amp-wordpress-embed-handler.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [
            {
                "name": "AMP_WordPress_Embed_Handler",
                "namespace": "global",
                "line": 20,
                "end_line": 144,
                "final": false,
                "abstract": false,
                "extends": "\\AMP_Base_Embed_Handler",
                "implements": [],
                "properties": [
                    {
                        "name": "$DEFAULT_HEIGHT",
                        "line": 33,
                        "end_line": 33,
                        "default": "200",
                        "static": false,
                        "visibility": "protected",
                        "doc": {
                            "description": "Default height.",
                            "long_description": "Note that 200px is the minimum that WordPress allows for a post embed. This minimum height is enforced by WordPress in the wp.receiveEmbedMessage() function, and the <amp-wordpress-embed> also enforces that same minimum height. It is important for the minimum height to be initially used because if the actual post embed window is _less_ than the initial, then no overflow button will be presented to resize the iframe to be _smaller_. So this ensures that the iframe will only ever overflow to grow in height.",
                            "tags": [
                                {
                                    "name": "var",
                                    "content": "",
                                    "types": [
                                        "int"
                                    ],
                                    "variable": ""
                                }
                            ]
                        }
                    },
                    {
                        "name": "$amp_tag",
                        "line": 40,
                        "end_line": 40,
                        "default": "\\AmpProject\\Extension::WORDPRESS_EMBED",
                        "static": false,
                        "visibility": "private",
                        "doc": {
                            "description": "Tag.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "var",
                                    "content": "AMP amp-wordpress-embed tag",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": ""
                                }
                            ]
                        }
                    }
                ],
                "methods": [
                    {
                        "name": "register_embed",
                        "namespace": "",
                        "aliases": {
                            "Extension": "\\AmpProject\\Extension",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Attribute": "\\AmpProject\\Html\\Attribute",
                            "Tag": "\\AmpProject\\Html\\Tag",
                            "Layout": "\\AmpProject\\Layout"
                        },
                        "line": 45,
                        "end_line": 47,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [],
                        "doc": {
                            "description": "Register embed.",
                            "long_description": "",
                            "tags": []
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "remove_action",
                                    "line": 46,
                                    "end_line": 46
                                }
                            ]
                        }
                    },
                    {
                        "name": "unregister_embed",
                        "namespace": "",
                        "aliases": {
                            "Extension": "\\AmpProject\\Extension",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Attribute": "\\AmpProject\\Html\\Attribute",
                            "Tag": "\\AmpProject\\Html\\Tag",
                            "Layout": "\\AmpProject\\Layout"
                        },
                        "line": 52,
                        "end_line": 54,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [],
                        "doc": {
                            "description": "Unregister embed.",
                            "long_description": "",
                            "tags": []
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "add_action",
                                    "line": 53,
                                    "end_line": 53
                                }
                            ]
                        }
                    },
                    {
                        "name": "sanitize_raw_embeds",
                        "namespace": "",
                        "aliases": {
                            "Extension": "\\AmpProject\\Extension",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Attribute": "\\AmpProject\\Html\\Attribute",
                            "Tag": "\\AmpProject\\Html\\Tag",
                            "Layout": "\\AmpProject\\Layout"
                        },
                        "line": 63,
                        "end_line": 103,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$dom",
                                "default": null,
                                "type": "\\AmpProject\\Dom\\Document"
                            }
                        ],
                        "doc": {
                            "description": "Sanitize WordPress embed raw embeds.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "Document.",
                                    "types": [
                                        "\\AmpProject\\Dom\\Document"
                                    ],
                                    "variable": "$dom"
                                },
                                {
                                    "name": "return",
                                    "content": "",
                                    "types": [
                                        "void"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "query",
                                    "class": "$dom->xpath",
                                    "static": false,
                                    "line": 65,
                                    "end_line": 65
                                },
                                {
                                    "name": "item",
                                    "class": "$dom->xpath->query('.\/following-sibling::script[ contains( text(), \"wp.receiveEmbedMessage\" ) ]', $embed_iframe)",
                                    "static": false,
                                    "line": 70,
                                    "end_line": 70
                                },
                                {
                                    "name": "query",
                                    "class": "$dom->xpath",
                                    "static": false,
                                    "line": 70,
                                    "end_line": 70
                                },
                                {
                                    "name": "removeChild",
                                    "class": "$embed_script->parentNode",
                                    "static": false,
                                    "line": 72,
                                    "end_line": 72
                                },
                                {
                                    "name": "item",
                                    "class": "$dom->xpath->query('.\/preceding-sibling::blockquote[ contains( concat( \" \", normalize-space( @class ), \" \" ), \" wp-embedded-content \" ) ]', $is_wrapped_in_paragraph ? $embed_iframe->parentNode : $embed_iframe)",
                                    "static": false,
                                    "line": 88,
                                    "end_line": 91
                                },
                                {
                                    "name": "query",
                                    "class": "$dom->xpath",
                                    "static": false,
                                    "line": 88,
                                    "end_line": 91
                                },
                                {
                                    "name": "replaceChild",
                                    "class": "$embed_iframe->parentNode->parentNode",
                                    "static": false,
                                    "line": 97,
                                    "end_line": 97
                                },
                                {
                                    "name": "create_amp_wordpress_embed_and_replace_node",
                                    "class": "\\AMP_WordPress_Embed_Handler",
                                    "static": false,
                                    "line": 100,
                                    "end_line": 100
                                }
                            ]
                        }
                    }
                ],
                "doc": {
                    "description": "Class AMP_WordPress_Embed_Handler",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.2.2"
                        }
                    ]
                }
            }
        ],
        "hooks": []
    },
    "58": {
        "file": {
            "description": "Class AMP_Base_Sanitizer",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/sanitizers\/class-amp-base-sanitizer.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [
            {
                "name": "AMP_Base_Sanitizer",
                "namespace": "global",
                "line": 18,
                "end_line": 932,
                "final": false,
                "abstract": true,
                "extends": "",
                "implements": [],
                "properties": [
                    {
                        "name": "$DEFAULT_ARGS",
                        "line": 36,
                        "end_line": 36,
                        "default": "array()",
                        "static": false,
                        "visibility": "protected",
                        "doc": {
                            "description": "Placeholder for default args, to be set in child classes.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.2"
                                },
                                {
                                    "name": "var",
                                    "content": "",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": ""
                                }
                            ]
                        }
                    },
                    {
                        "name": "$dom",
                        "line": 45,
                        "end_line": 45,
                        "default": null,
                        "static": false,
                        "visibility": "protected",
                        "doc": {
                            "description": "DOM.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "var",
                                    "content": "An AmpProject\\Document representation of an HTML document.",
                                    "types": [
                                        "\\AmpProject\\Dom\\Document"
                                    ],
                                    "variable": ""
                                },
                                {
                                    "name": "since",
                                    "content": "0.2"
                                }
                            ]
                        }
                    },
                    {
                        "name": "$args",
                        "line": 66,
                        "end_line": 66,
                        "default": null,
                        "static": false,
                        "visibility": "protected",
                        "doc": {
                            "description": "Array of flags used to control sanitization.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "var",
                                    "content": "{      @type int $content_max_width      @type bool $add_placeholder      @type bool $use_document_element      @type bool $require_https_src      @type string[] $amp_allowed_tags      @type string[] $amp_globally_allowed_attributes      @type string[] $amp_layout_allowed_attributes      @type array $amp_allowed_tags      @type array $amp_globally_allowed_attributes      @type array $amp_layout_allowed_attributes      @type array $amp_bind_placeholder_prefix      @type bool $should_locate_sources      @type callable $validation_error_callback }",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": ""
                                }
                            ]
                        }
                    },
                    {
                        "name": "$did_convert_elements",
                        "line": 76,
                        "end_line": 76,
                        "default": "false",
                        "static": false,
                        "visibility": "protected",
                        "doc": {
                            "description": "Flag to be set in child class' sanitize() method indicating if the HTML contained in the Dom\\Document has been sanitized yet or not.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.2"
                                },
                                {
                                    "name": "var",
                                    "content": "",
                                    "types": [
                                        "bool"
                                    ],
                                    "variable": ""
                                }
                            ]
                        }
                    },
                    {
                        "name": "$root_element",
                        "line": 83,
                        "end_line": 83,
                        "default": null,
                        "static": false,
                        "visibility": "protected",
                        "doc": {
                            "description": "The root element used for sanitization. Either html or body.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "var",
                                    "content": "",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": ""
                                }
                            ]
                        }
                    }
                ],
                "methods": {
                    "0": {
                        "name": "__construct",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 102,
                        "end_line": 111,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$dom",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$args",
                                "default": "array()",
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "AMP_Base_Sanitizer constructor.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.2"
                                },
                                {
                                    "name": "param",
                                    "content": "Represents the HTML document to sanitize.",
                                    "types": [
                                        "\\AmpProject\\Dom\\Document"
                                    ],
                                    "variable": "$dom"
                                },
                                {
                                    "name": "param",
                                    "content": "{      Args.      @type int $content_max_width      @type bool $add_placeholder      @type bool $require_https_src      @type string[] $amp_allowed_tags      @type string[] $amp_globally_allowed_attributes      @type string[] $amp_layout_allowed_attributes }",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$args"
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "array_merge",
                                    "line": 104,
                                    "end_line": 104
                                }
                            ]
                        }
                    },
                    "1": {
                        "name": "add_buffering_hooks",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 127,
                        "end_line": 127,
                        "final": false,
                        "abstract": false,
                        "static": true,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$args",
                                "default": "array()",
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Add filters to manipulate output during output buffering before the DOM is constructed.",
                            "long_description": "Add actions and filters before the page is rendered so that the sanitizer can fix issues during output buffering. This provides an alternative to manipulating the DOM in the sanitize method. This is a static function because it is invoked before the class is instantiated, as the DOM is not available yet. This method is only called when 'amp' theme support is present. It is conceptually similar to the AMP_Base_Embed_Handler class's register_embed method.",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "1.0"
                                },
                                {
                                    "name": "see",
                                    "content": "",
                                    "refers": "\\AMP_Base_Embed_Handler::register_embed()"
                                },
                                {
                                    "name": "param",
                                    "content": "Args.",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$args"
                                }
                            ]
                        }
                    },
                    "2": {
                        "name": "get_selector_conversion_mapping",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 136,
                        "end_line": 138,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [],
                        "doc": {
                            "description": "Get mapping of HTML selectors to the AMP component selectors which they may be converted into.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "see",
                                    "content": "",
                                    "refers": "AMP_Style_Sanitizer::ampify_ruleset_selectors()"
                                },
                                {
                                    "name": "return",
                                    "content": "Mapping.",
                                    "types": [
                                        "array"
                                    ]
                                }
                            ]
                        }
                    },
                    "3": {
                        "name": "has_light_shadow_dom",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 168,
                        "end_line": 170,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [],
                        "doc": {
                            "description": "Determine whether the resulting AMP element uses a \"light\" shadow DOM.",
                            "long_description": "Sometimes AMP components serve as wrappers for native elements, like `amp-img` for `img`. When this is the case, authors sometimes will want to style the shadow element (such as to set object-fit). Normally if a selector contains `img` then the style sanitizer will always convert this to `amp-img` (and `amp-anim`), which may break the author's intended selector target. So when using a sanitizer's selector conversion mapping to rewrite non-AMP to AMP selectors, it will first check to see if the selector already mentions an AMP tag and if so it will skip the conversions for that selector. In this way, an `amp-img img` selector will not get converted into `amp-img amp-img`. The selector mapping also is involved when doing tree shaking. In the case of the selector `amp-img img`, the tree shaker would normally strip out this selector because no `img` may be present in the page as it is added by the AMP runtime (unless noscript fallbacks have been added, and this also disregards data-hero images which are added later by AMP Optimizer). So in order to prevent such selectors from being stripped out, it's important to include the `amp-img` selector among the `dynamic_element_selectors` so that the `img` in the `amp-img img` selector is ignored for the purposes of tree shaking. This method is used to indicate which sanitizers are involved in such element conversions. If this method returns true, then the keys in the selector conversion mapping should be used as `dynamic_element_selectors`.\n In other words, this method indicates whether keys in the conversion mapping are ancestors of elements which are created at runtime. This method is only relevant when the `get_selector_conversion_mapping()` method returns a mapping.",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "2.2"
                                },
                                {
                                    "name": "see",
                                    "content": "",
                                    "refers": "AMP_Style_Sanitizer::ampify_ruleset_selectors()"
                                },
                                {
                                    "name": "see",
                                    "content": "",
                                    "refers": "AMP_Base_Sanitizer::get_selector_conversion_mapping()"
                                },
                                {
                                    "name": "return",
                                    "content": "Whether light DOM is used.",
                                    "types": [
                                        "bool"
                                    ]
                                }
                            ]
                        }
                    },
                    "4": {
                        "name": "get_arg",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 180,
                        "end_line": 185,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$key",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Get arg.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "2.2"
                                },
                                {
                                    "name": "param",
                                    "content": "Arg key.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$key"
                                },
                                {
                                    "name": "return",
                                    "content": "Args.",
                                    "types": [
                                        "mixed"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "array_key_exists",
                                    "line": 181,
                                    "end_line": 181
                                }
                            ]
                        }
                    },
                    "5": {
                        "name": "get_args",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 194,
                        "end_line": 196,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [],
                        "doc": {
                            "description": "Get args.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "2.2"
                                },
                                {
                                    "name": "return",
                                    "content": "Args.",
                                    "types": [
                                        "array"
                                    ]
                                }
                            ]
                        }
                    },
                    "6": {
                        "name": "update_args",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 207,
                        "end_line": 209,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$args",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Update args.",
                            "long_description": "Merges the supplied args with the existing args.",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "2.2"
                                },
                                {
                                    "name": "param",
                                    "content": "Args.",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$args"
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "array_merge",
                                    "line": 208,
                                    "end_line": 208
                                }
                            ]
                        }
                    },
                    "7": {
                        "name": "init",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 219,
                        "end_line": 219,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$sanitizers",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Run logic before any sanitizers are run.",
                            "long_description": "After the sanitizers are instantiated but before calling sanitize on each of them, this method is called with list of all the instantiated sanitizers.",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "Sanitizers.",
                                    "types": [
                                        "\\AMP_Base_Sanitizer[]"
                                    ],
                                    "variable": "$sanitizers"
                                }
                            ]
                        }
                    },
                    "8": {
                        "name": "sanitize",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 224,
                        "end_line": 224,
                        "final": false,
                        "abstract": true,
                        "static": false,
                        "visibility": "public",
                        "arguments": [],
                        "doc": {
                            "description": "Sanitize the HTML contained in the DOMDocument received by the constructor",
                            "long_description": "",
                            "tags": []
                        }
                    },
                    "9": {
                        "name": "get_scripts",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 238,
                        "end_line": 240,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [],
                        "doc": {
                            "description": "Return array of values that would be valid as an HTML `script` element.",
                            "long_description": "Array keys are AMP element names and array values are their respective Javascript URLs from https:\/\/cdn.ampproject.org",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.2"
                                },
                                {
                                    "name": "return",
                                    "content": "Returns component name as array key and JavaScript URL as array value,                  respectively. Will return an empty array if sanitization has yet to be run                  or if it did not find any HTML elements to convert to AMP equivalents.",
                                    "types": [
                                        "string[]"
                                    ]
                                }
                            ]
                        }
                    },
                    "11": {
                        "name": "get_stylesheets",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 262,
                        "end_line": 272,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [],
                        "doc": {
                            "description": "Get stylesheets.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.7"
                                },
                                {
                                    "name": "return",
                                    "content": "Values are the CSS stylesheets. Keys are MD5 hashes of the stylesheets.",
                                    "types": [
                                        "array"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "get_styles",
                                    "class": "\\AMP_Base_Sanitizer",
                                    "static": false,
                                    "line": 265,
                                    "end_line": 265
                                }
                            ],
                            "functions": [
                                {
                                    "name": "sprintf",
                                    "line": 266,
                                    "end_line": 266
                                },
                                {
                                    "name": "implode",
                                    "line": 266,
                                    "end_line": 266
                                },
                                {
                                    "name": "md5",
                                    "line": 268,
                                    "end_line": 268
                                }
                            ]
                        }
                    },
                    "12": {
                        "name": "get_body_node",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 281,
                        "end_line": 284,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "protected",
                        "arguments": [],
                        "doc": {
                            "description": "Get HTML body as DOMElement from Dom\\Document received by the constructor.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "codeCoverageIgnore",
                                    "content": ""
                                },
                                {
                                    "name": "deprecated",
                                    "content": "Use $this->dom->body instead.",
                                    "description": "Use $this->dom->body instead."
                                },
                                {
                                    "name": "return",
                                    "content": "The body element.",
                                    "types": [
                                        "\\DOMElement"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "_deprecated_function",
                                    "line": 282,
                                    "end_line": 282,
                                    "deprecation_version": "1.5.0"
                                }
                            ]
                        }
                    },
                    "13": {
                        "name": "sanitize_dimension",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 294,
                        "end_line": 325,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$value",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$dimension",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Sanitizes a CSS dimension specifier while being sensitive to dimension context.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "A valid CSS dimension specifier; e.g. 50, 50px, 50%. Can be 'auto' for width.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$value"
                                },
                                {
                                    "name": "param",
                                    "content": "Dimension, either 'width' or 'height'.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$dimension"
                                },
                                {
                                    "name": "return",
                                    "content": "Returns a numeric dimension value, 'auto', or an empty string.",
                                    "types": [
                                        "float",
                                        "int",
                                        "string"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "is_numeric",
                                    "line": 302,
                                    "end_line": 302
                                },
                                {
                                    "name": "max",
                                    "line": 303,
                                    "end_line": 303
                                },
                                {
                                    "name": "absint",
                                    "line": 310,
                                    "end_line": 310
                                },
                                {
                                    "name": "round",
                                    "line": 311,
                                    "end_line": 311
                                }
                            ],
                            "methods": [
                                {
                                    "name": "endswith",
                                    "class": "\\AMP_String_Utils",
                                    "static": true,
                                    "line": 306,
                                    "end_line": 306
                                },
                                {
                                    "name": "__construct",
                                    "class": "\\AmpProject\\CssLength",
                                    "static": false,
                                    "line": 315,
                                    "end_line": 315
                                },
                                {
                                    "name": "validate",
                                    "class": "$length",
                                    "static": false,
                                    "line": 316,
                                    "end_line": 316
                                },
                                {
                                    "name": "isValid",
                                    "class": "$length",
                                    "static": false,
                                    "line": 317,
                                    "end_line": 317
                                },
                                {
                                    "name": "isAuto",
                                    "class": "$length",
                                    "static": false,
                                    "line": 318,
                                    "end_line": 318
                                },
                                {
                                    "name": "getNumeral",
                                    "class": "$length",
                                    "static": false,
                                    "line": 321,
                                    "end_line": 321
                                },
                                {
                                    "name": "getUnit",
                                    "class": "$length",
                                    "static": false,
                                    "line": 321,
                                    "end_line": 321
                                },
                                {
                                    "name": "getUnit",
                                    "class": "$length",
                                    "static": false,
                                    "line": 321,
                                    "end_line": 321
                                }
                            ]
                        }
                    },
                    "14": {
                        "name": "is_empty_attribute_value",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 333,
                        "end_line": 335,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$value",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Determine if an attribute value is empty.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "Attribute value.",
                                    "types": [
                                        "string",
                                        "null"
                                    ],
                                    "variable": "$value"
                                },
                                {
                                    "name": "return",
                                    "content": "True if empty, false if not.",
                                    "types": [
                                        "bool"
                                    ]
                                }
                            ]
                        }
                    },
                    "15": {
                        "name": "set_layout",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 355,
                        "end_line": 462,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$attributes",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Sets the layout, and possibly the 'height' and 'width' attributes.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "{      Attributes.      @type string     $bottom      @type int|string $height      @type string     $layout      @type string     $left      @type string     $position      @type string     $right      @type string     $style      @type string     $top      @type int|string $width }",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$attributes"
                                },
                                {
                                    "name": "return",
                                    "content": "Attributes.",
                                    "types": [
                                        "array"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "parse_style_string",
                                    "class": "\\AMP_Base_Sanitizer",
                                    "static": false,
                                    "line": 362,
                                    "end_line": 362
                                },
                                {
                                    "name": "reassemble_style_string",
                                    "class": "\\AMP_Base_Sanitizer",
                                    "static": false,
                                    "line": 376,
                                    "end_line": 376
                                },
                                {
                                    "name": "reassemble_style_string",
                                    "class": "\\AMP_Base_Sanitizer",
                                    "static": false,
                                    "line": 393,
                                    "end_line": 393
                                },
                                {
                                    "name": "reassemble_style_string",
                                    "class": "\\AMP_Base_Sanitizer",
                                    "static": false,
                                    "line": 417,
                                    "end_line": 417
                                },
                                {
                                    "name": "sanitize_dimension",
                                    "class": "\\AMP_Base_Sanitizer",
                                    "static": false,
                                    "line": 427,
                                    "end_line": 427
                                }
                            ],
                            "functions": [
                                {
                                    "name": "wp_array_slice_assoc",
                                    "line": 426,
                                    "end_line": 426
                                },
                                {
                                    "name": "preg_replace",
                                    "line": 433,
                                    "end_line": 433
                                },
                                {
                                    "name": "count",
                                    "line": 442,
                                    "end_line": 442
                                },
                                {
                                    "name": "array_merge",
                                    "line": 443,
                                    "end_line": 443
                                }
                            ]
                        }
                    },
                    "16": {
                        "name": "add_or_append_attribute",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 483,
                        "end_line": 489,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$attributes",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$key",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$value",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$separator",
                                "default": "' '",
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Adds or appends key and value to list of attributes",
                            "long_description": "Adds key and value to list of attributes, or if the key already exists in the array it concatenates to existing attribute separator by a space or other supplied separator.",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "{      Attributes.      @type int $height      @type int $width      @type string $sizes      @type string $class      @type string $layout }",
                                    "types": [
                                        "string[]"
                                    ],
                                    "variable": "$attributes"
                                },
                                {
                                    "name": "param",
                                    "content": "Valid associative array index to add.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$key"
                                },
                                {
                                    "name": "param",
                                    "content": "Value to add or append to array indexed at the key.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$value"
                                },
                                {
                                    "name": "param",
                                    "content": "Optional; defaults to space but some other separator if needed.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$separator"
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "trim",
                                    "line": 485,
                                    "end_line": 485
                                }
                            ]
                        }
                    },
                    "17": {
                        "name": "maybe_enforce_https_src",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 500,
                        "end_line": 515,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$src",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$force_https",
                                "default": "false",
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Decide if we should remove a src attribute if https is required.",
                            "long_description": "If not required, the implementing class may want to try and force https instead.",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "URL to convert to HTTPS if forced, or made empty if $args['require_https_src'].",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$src"
                                },
                                {
                                    "name": "param",
                                    "content": "Force setting of HTTPS if true.",
                                    "types": [
                                        "boolean"
                                    ],
                                    "variable": "$force_https"
                                },
                                {
                                    "name": "return",
                                    "content": "URL which may have been updated with HTTPS, or may have been made empty.",
                                    "types": [
                                        "string"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "strtok",
                                    "line": 501,
                                    "end_line": 501
                                },
                                {
                                    "name": "set_url_scheme",
                                    "line": 510,
                                    "end_line": 510
                                }
                            ]
                        }
                    },
                    "18": {
                        "name": "is_document_in_dev_mode",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 526,
                        "end_line": 529,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "protected",
                        "arguments": [],
                        "doc": {
                            "description": "Check whether the document of a given node is in dev mode.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "1.3"
                                },
                                {
                                    "name": "deprecated",
                                    "content": "Use AmpProject\\DevMode::isActiveForDocument( $document ) instead.",
                                    "description": "Use AmpProject\\DevMode::isActiveForDocument( $document ) instead."
                                },
                                {
                                    "name": "return",
                                    "content": "Whether the document is in dev mode.",
                                    "types": [
                                        "bool"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "_deprecated_function",
                                    "line": 527,
                                    "end_line": 527,
                                    "deprecation_version": "1.5"
                                }
                            ],
                            "methods": [
                                {
                                    "name": "isActiveForDocument",
                                    "class": "\\AmpProject\\DevMode",
                                    "static": true,
                                    "line": 528,
                                    "end_line": 528
                                }
                            ]
                        }
                    },
                    "19": {
                        "name": "has_dev_mode_exemption",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 541,
                        "end_line": 544,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "protected",
                        "arguments": [
                            {
                                "name": "$node",
                                "default": null,
                                "type": "\\DOMNode"
                            }
                        ],
                        "doc": {
                            "description": "Check whether a node is exempt from validation during dev mode.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "1.3"
                                },
                                {
                                    "name": "deprecated",
                                    "content": "Use AmpProject\\DevMode::hasExemptionForNode( $node ) instead.",
                                    "description": "Use AmpProject\\DevMode::hasExemptionForNode( $node ) instead."
                                },
                                {
                                    "name": "param",
                                    "content": "Node to check.",
                                    "types": [
                                        "\\DOMNode"
                                    ],
                                    "variable": "$node"
                                },
                                {
                                    "name": "return",
                                    "content": "Whether the node should be exempt during dev mode.",
                                    "types": [
                                        "bool"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "_deprecated_function",
                                    "line": 542,
                                    "end_line": 542,
                                    "deprecation_version": "1.5"
                                }
                            ],
                            "methods": [
                                {
                                    "name": "hasExemptionForNode",
                                    "class": "\\AmpProject\\DevMode",
                                    "static": true,
                                    "line": 543,
                                    "end_line": 543
                                }
                            ]
                        }
                    },
                    "20": {
                        "name": "is_exempt_from_validation",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 554,
                        "end_line": 557,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "protected",
                        "arguments": [
                            {
                                "name": "$node",
                                "default": null,
                                "type": "\\DOMNode"
                            }
                        ],
                        "doc": {
                            "description": "Check whether a certain node should be exempt from validation.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "deprecated",
                                    "content": "Use AmpProject\\DevMode::isExemptFromValidation( $node ) instead.",
                                    "description": "Use AmpProject\\DevMode::isExemptFromValidation( $node ) instead."
                                },
                                {
                                    "name": "param",
                                    "content": "Node to check.",
                                    "types": [
                                        "\\DOMNode"
                                    ],
                                    "variable": "$node"
                                },
                                {
                                    "name": "return",
                                    "content": "Whether the node should be exempt from validation.",
                                    "types": [
                                        "bool"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "_deprecated_function",
                                    "line": 555,
                                    "end_line": 555,
                                    "deprecation_version": "1.5"
                                }
                            ],
                            "methods": [
                                {
                                    "name": "isExemptFromValidation",
                                    "class": "\\AmpProject\\DevMode",
                                    "static": true,
                                    "line": 556,
                                    "end_line": 556
                                }
                            ]
                        }
                    },
                    "21": {
                        "name": "remove_invalid_child",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 571,
                        "end_line": 592,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$node",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$validation_error",
                                "default": "array()",
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Removes an invalid child of a node.",
                            "long_description": "Also, calls the mutation callback for it. This tracks all the nodes that were removed.",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.7"
                                },
                                {
                                    "name": "param",
                                    "content": "The node to remove.",
                                    "types": [
                                        "\\DOMNode",
                                        "\\DOMElement"
                                    ],
                                    "variable": "$node"
                                },
                                {
                                    "name": "param",
                                    "content": "Validation error details.",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$validation_error"
                                },
                                {
                                    "name": "return",
                                    "content": "Whether the node should have been removed, that is, that the node was sanitized for validity.",
                                    "types": [
                                        "bool"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "isExemptFromValidation",
                                    "class": "\\AmpProject\\DevMode",
                                    "static": true,
                                    "line": 572,
                                    "end_line": 572
                                },
                                {
                                    "name": "is_amp_unvalidated_for_node",
                                    "class": "\\AmpProject\\AmpWP\\ValidationExemption",
                                    "static": true,
                                    "line": 576,
                                    "end_line": 576
                                },
                                {
                                    "name": "is_px_verified_for_node",
                                    "class": "\\AmpProject\\AmpWP\\ValidationExemption",
                                    "static": true,
                                    "line": 576,
                                    "end_line": 576
                                },
                                {
                                    "name": "should_sanitize_validation_error",
                                    "class": "\\AMP_Base_Sanitizer",
                                    "static": false,
                                    "line": 580,
                                    "end_line": 580
                                },
                                {
                                    "name": "removeChild",
                                    "class": "$node->parentNode",
                                    "static": false,
                                    "line": 587,
                                    "end_line": 587
                                },
                                {
                                    "name": "mark_node_as_amp_unvalidated",
                                    "class": "\\AmpProject\\AmpWP\\ValidationExemption",
                                    "static": true,
                                    "line": 589,
                                    "end_line": 589
                                }
                            ],
                            "functions": [
                                {
                                    "name": "compact",
                                    "line": 580,
                                    "end_line": 580
                                }
                            ]
                        }
                    },
                    "22": {
                        "name": "remove_invalid_attribute",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 608,
                        "end_line": 642,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$element",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$attribute",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$validation_error",
                                "default": "array()",
                                "type": ""
                            },
                            {
                                "name": "$attr_spec",
                                "default": "array()",
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Removes an invalid attribute of a node.",
                            "long_description": "Also, calls the mutation callback for it. This tracks all the attributes that were removed.",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.7"
                                },
                                {
                                    "name": "param",
                                    "content": "The node for which to remove the attribute.",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": "$element"
                                },
                                {
                                    "name": "param",
                                    "content": "The attribute to remove from the element.",
                                    "types": [
                                        "\\DOMAttr",
                                        "string"
                                    ],
                                    "variable": "$attribute"
                                },
                                {
                                    "name": "param",
                                    "content": "Validation error details.",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$validation_error"
                                },
                                {
                                    "name": "param",
                                    "content": "Attribute spec.",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$attr_spec"
                                },
                                {
                                    "name": "return",
                                    "content": "Whether the node should have been removed, that is, that the node was sanitized for validity.",
                                    "types": [
                                        "bool"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "isExemptFromValidation",
                                    "class": "\\AmpProject\\DevMode",
                                    "static": true,
                                    "line": 609,
                                    "end_line": 609
                                },
                                {
                                    "name": "getAttributeNode",
                                    "class": "$element",
                                    "static": false,
                                    "line": 614,
                                    "end_line": 614
                                },
                                {
                                    "name": "is_amp_unvalidated_for_node",
                                    "class": "\\AmpProject\\AmpWP\\ValidationExemption",
                                    "static": true,
                                    "line": 624,
                                    "end_line": 624
                                },
                                {
                                    "name": "is_px_verified_for_node",
                                    "class": "\\AmpProject\\AmpWP\\ValidationExemption",
                                    "static": true,
                                    "line": 624,
                                    "end_line": 624
                                },
                                {
                                    "name": "should_sanitize_validation_error",
                                    "class": "\\AMP_Base_Sanitizer",
                                    "static": false,
                                    "line": 628,
                                    "end_line": 628
                                },
                                {
                                    "name": "removeAttributeNode",
                                    "class": "$element",
                                    "static": false,
                                    "line": 635,
                                    "end_line": 635
                                },
                                {
                                    "name": "mark_node_as_amp_unvalidated",
                                    "class": "\\AmpProject\\AmpWP\\ValidationExemption",
                                    "static": true,
                                    "line": 638,
                                    "end_line": 638
                                }
                            ],
                            "functions": [
                                {
                                    "name": "is_string",
                                    "line": 613,
                                    "end_line": 613
                                },
                                {
                                    "name": "compact",
                                    "line": 628,
                                    "end_line": 628
                                }
                            ]
                        }
                    },
                    "23": {
                        "name": "should_sanitize_validation_error",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 653,
                        "end_line": 659,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$validation_error",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$data",
                                "default": "array()",
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Check whether or not sanitization should occur in response to validation error.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "1.0"
                                },
                                {
                                    "name": "param",
                                    "content": "Validation error.",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$validation_error"
                                },
                                {
                                    "name": "param",
                                    "content": "Data including the node.",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$data"
                                },
                                {
                                    "name": "return",
                                    "content": "Whether to sanitize.",
                                    "types": [
                                        "bool"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "is_callable",
                                    "line": 654,
                                    "end_line": 654
                                },
                                {
                                    "name": "call_user_func",
                                    "line": 658,
                                    "end_line": 658
                                }
                            ],
                            "methods": [
                                {
                                    "name": "prepare_validation_error",
                                    "class": "\\AMP_Base_Sanitizer",
                                    "static": false,
                                    "line": 657,
                                    "end_line": 657
                                }
                            ]
                        }
                    },
                    "24": {
                        "name": "prepare_validation_error",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 676,
                        "end_line": 768,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$error",
                                "default": "array()",
                                "type": "array"
                            },
                            {
                                "name": "$data",
                                "default": "array()",
                                "type": "array"
                            }
                        ],
                        "doc": {
                            "description": "Prepare validation error.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "{     Error.     @type string $code Error code. }",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$error"
                                },
                                {
                                    "name": "param",
                                    "content": "{     Data.     @type DOMElement|DOMNode $node The removed node. }",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$data"
                                },
                                {
                                    "name": "return",
                                    "content": "Error.",
                                    "types": [
                                        "array"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "hasAttribute",
                                    "class": "$node",
                                    "static": false,
                                    "line": 707,
                                    "end_line": 707
                                },
                                {
                                    "name": "hasAttribute",
                                    "class": "$node",
                                    "static": false,
                                    "line": 708,
                                    "end_line": 708
                                },
                                {
                                    "name": "hasAttribute",
                                    "class": "$node",
                                    "static": false,
                                    "line": 708,
                                    "end_line": 708
                                },
                                {
                                    "name": "hasAttributes",
                                    "class": "$node->parentNode",
                                    "static": false,
                                    "line": 753,
                                    "end_line": 753
                                }
                            ],
                            "functions": [
                                {
                                    "name": "preg_replace",
                                    "line": 714,
                                    "end_line": 729
                                },
                                {
                                    "name": "strpos",
                                    "line": 738,
                                    "end_line": 738
                                },
                                {
                                    "name": "add_query_arg",
                                    "line": 739,
                                    "end_line": 739
                                },
                                {
                                    "name": "strpos",
                                    "line": 740,
                                    "end_line": 740
                                },
                                {
                                    "name": "add_query_arg",
                                    "line": 741,
                                    "end_line": 741
                                },
                                {
                                    "name": "preg_match",
                                    "line": 749,
                                    "end_line": 749
                                },
                                {
                                    "name": "trim",
                                    "line": 760,
                                    "end_line": 760
                                }
                            ]
                        }
                    },
                    "25": {
                        "name": "clean_up_after_attribute_removal",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 778,
                        "end_line": 793,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "protected",
                        "arguments": [
                            {
                                "name": "$element",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$attribute",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Cleans up artifacts after the removal of an attribute node.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "1.3"
                                },
                                {
                                    "name": "param",
                                    "content": "The node for which the attribute was removed.",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": "$element"
                                },
                                {
                                    "name": "param",
                                    "content": "The attribute that was removed.",
                                    "types": [
                                        "\\DOMAttr"
                                    ],
                                    "variable": "$attribute"
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "hasAttribute",
                                    "class": "$element",
                                    "static": false,
                                    "line": 788,
                                    "end_line": 788
                                },
                                {
                                    "name": "removeAttribute",
                                    "class": "$element",
                                    "static": false,
                                    "line": 789,
                                    "end_line": 789
                                }
                            ]
                        }
                    },
                    "26": {
                        "name": "get_data_amp_attributes",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 801,
                        "end_line": 817,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$node",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Get data-amp-* values from the parent node 'figure' added by editor block.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "Base node.",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": "$node"
                                },
                                {
                                    "name": "return",
                                    "content": "AMP data array.",
                                    "types": [
                                        "array"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "get_node_attributes_as_assoc_array",
                                    "class": "\\AMP_DOM_Utils",
                                    "static": true,
                                    "line": 807,
                                    "end_line": 807
                                }
                            ],
                            "functions": [
                                {
                                    "name": "filter_var",
                                    "line": 811,
                                    "end_line": 811
                                }
                            ]
                        }
                    },
                    "27": {
                        "name": "filter_data_amp_attributes",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 826,
                        "end_line": 834,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$attributes",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$amp_data",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Set AMP attributes.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "Array of attributes.",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$attributes"
                                },
                                {
                                    "name": "param",
                                    "content": "Array of AMP attributes.",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$amp_data"
                                },
                                {
                                    "name": "return",
                                    "content": "Updated attributes.",
                                    "types": [
                                        "array"
                                    ]
                                }
                            ]
                        }
                    },
                    "28": {
                        "name": "filter_attachment_layout_attributes",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 844,
                        "end_line": 870,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$node",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$new_attributes",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$layout",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Set attributes to node's parent element according to layout.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "Node.",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": "$node"
                                },
                                {
                                    "name": "param",
                                    "content": "Attributes array.",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$new_attributes"
                                },
                                {
                                    "name": "param",
                                    "content": "Layout.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$layout"
                                },
                                {
                                    "name": "return",
                                    "content": "New attributes.",
                                    "types": [
                                        "array"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "setAttribute",
                                    "class": "$node->parentNode",
                                    "static": false,
                                    "line": 852,
                                    "end_line": 852
                                },
                                {
                                    "name": "setAttribute",
                                    "class": "$node->parentNode",
                                    "static": false,
                                    "line": 859,
                                    "end_line": 859
                                },
                                {
                                    "name": "setAttribute",
                                    "class": "$node->parentNode",
                                    "static": false,
                                    "line": 862,
                                    "end_line": 862
                                }
                            ]
                        }
                    },
                    "29": {
                        "name": "parse_style_string",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 878,
                        "end_line": 892,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "protected",
                        "arguments": [
                            {
                                "name": "$style_string",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Parse a style string into an associative array of style attributes.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "Style string to parse.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$style_string"
                                },
                                {
                                    "name": "return",
                                    "content": "Associative array of style attributes.",
                                    "types": [
                                        "string[]"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "trim",
                                    "line": 880,
                                    "end_line": 880
                                },
                                {
                                    "name": "preg_split",
                                    "line": 881,
                                    "end_line": 881
                                },
                                {
                                    "name": "count",
                                    "line": 883,
                                    "end_line": 883
                                },
                                {
                                    "name": "array_pop",
                                    "line": 885,
                                    "end_line": 885
                                },
                                {
                                    "name": "array_chunk",
                                    "line": 888,
                                    "end_line": 888
                                },
                                {
                                    "name": "array_combine",
                                    "line": 891,
                                    "end_line": 891
                                },
                                {
                                    "name": "array_column",
                                    "line": 891,
                                    "end_line": 891
                                },
                                {
                                    "name": "array_column",
                                    "line": 891,
                                    "end_line": 891
                                }
                            ]
                        }
                    },
                    "30": {
                        "name": "reassemble_style_string",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 900,
                        "end_line": 919,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "protected",
                        "arguments": [
                            {
                                "name": "$styles",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Reassemble a style string that can be used in a 'style' attribute.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "Associative array of styles to reassemble into a string.",
                                    "types": [
                                        "array"
                                    ],
                                    "variable": "$styles"
                                },
                                {
                                    "name": "return",
                                    "content": "Reassembled style string.",
                                    "types": [
                                        "string"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "is_array",
                                    "line": 901,
                                    "end_line": 901
                                },
                                {
                                    "name": "array_filter",
                                    "line": 906,
                                    "end_line": 906
                                },
                                {
                                    "name": "array_reduce",
                                    "line": 908,
                                    "end_line": 918
                                },
                                {
                                    "name": "array_keys",
                                    "line": 909,
                                    "end_line": 909
                                }
                            ]
                        }
                    },
                    "31": {
                        "name": "get_validate_response_data",
                        "namespace": "",
                        "aliases": {
                            "ValidationExemption": "\\AmpProject\\AmpWP\\ValidationExemption",
                            "CssLength": "\\AmpProject\\CssLength",
                            "DevMode": "\\AmpProject\\DevMode",
                            "Document": "\\AmpProject\\Dom\\Document"
                        },
                        "line": 929,
                        "end_line": 931,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [],
                        "doc": {
                            "description": "Get data that is returned in validate responses.",
                            "long_description": "The array returned is merged with the overall validate response data.",
                            "tags": [
                                {
                                    "name": "see",
                                    "content": "",
                                    "refers": "\\AMP_Validation_Manager::get_validate_response_data()"
                                },
                                {
                                    "name": "return",
                                    "content": "Validate response data.",
                                    "types": [
                                        "array"
                                    ]
                                }
                            ]
                        }
                    }
                },
                "doc": {
                    "description": "Class AMP_Base_Sanitizer",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.2"
                        }
                    ]
                }
            }
        ],
        "hooks": []
    },
    "71": {
        "file": {
            "description": "Class AMP_Links_Sanitizer.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/sanitizers\/class-amp-link-sanitizer.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [],
        "hooks": [
            {
                "name": "amp_to_amp_linking_element_excluded",
                "line": 221,
                "end_line": 221,
                "type": "filter",
                "arguments": [
                    "$excluded",
                    "$url",
                    "$rel",
                    "$element"
                ],
                "doc": {
                    "description": "Filters whether AMP-to-AMP is excluded for an element.",
                    "long_description": "The element may be either a link (`a` or `area`) or a `form`.",
                    "tags": [
                        {
                            "name": "param",
                            "content": "Excluded. Default value is whether element already has a `noamphtml` link relation or the URL is among `excluded_urls`.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$excluded"
                        },
                        {
                            "name": "param",
                            "content": "URL considered for exclusion.",
                            "types": [
                                "string"
                            ],
                            "variable": "$url"
                        },
                        {
                            "name": "param",
                            "content": "Link relations.",
                            "types": [
                                "string[]"
                            ],
                            "variable": "$rel"
                        },
                        {
                            "name": "param",
                            "content": "The element considered for excluding from AMP-to-AMP linking. May be instance of `a`, `area`, or `form`.",
                            "types": [
                                "\\DOMElement"
                            ],
                            "variable": "$element"
                        }
                    ]
                }
            }
        ]
    },
    "86": {
        "file": {
            "description": "Class AMP_Customizer_Design_Settings",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/settings\/class-amp-customizer-design-settings.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "includes": [
            {
                "name": "",
                "line": 233,
                "type": "Require"
            }
        ],
        "classes": [],
        "hooks": [
            {
                "name": "amp_customizer_is_enabled",
                "line": 59,
                "end_line": 59,
                "type": "filter",
                "arguments": [
                    "true"
                ],
                "doc": {
                    "description": "Filter whether to enable the AMP default template design settings.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.4"
                        },
                        {
                            "name": "since",
                            "content": "0.6",
                            "description": "This filter now controls whether or not the default settings, controls, and sections are registered for the Customizer. The AMP panel will be registered regardless."
                        },
                        {
                            "name": "param",
                            "content": "Whether to enable the AMP default template design settings. Default true.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$enable"
                        }
                    ]
                }
            }
        ]
    },
    "87": {
        "file": {
            "description": "Class AMP_Customizer_Settings",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/settings\/class-amp-customizer-settings.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [],
        "hooks": [
            {
                "name": "amp_customizer_get_settings",
                "line": 43,
                "end_line": 43,
                "type": "filter",
                "arguments": [
                    "$settings"
                ],
                "doc": {
                    "description": "Filters the AMP Customizer settings.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.6"
                        },
                        {
                            "name": "param",
                            "content": "Associative array of $setting => $value pairs.",
                            "types": [
                                "array"
                            ],
                            "variable": "$settings"
                        }
                    ]
                }
            }
        ]
    },
    "92": {
        "file": {
            "description": "AMP_Post_Template class.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/templates\/class-amp-post-template.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "includes": [
            {
                "name": "",
                "line": 485,
                "type": "Include"
            }
        ],
        "classes": [],
        "hooks": {
            "0": {
                "name": "amp_content_max_width",
                "line": 113,
                "end_line": 113,
                "type": "filter",
                "arguments": [
                    "$content_max_width"
                ],
                "doc": {
                    "description": "Filters the content max width for Reader templates.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.2"
                        },
                        {
                            "name": "param",
                            "content": "Content max width.",
                            "types": [
                                "int"
                            ],
                            "variable": "$content_max_width"
                        }
                    ]
                }
            },
            "2": {
                "name": "amp_post_template_data",
                "line": 160,
                "end_line": 160,
                "type": "filter",
                "arguments": [
                    "$this->data",
                    "$this->post"
                ],
                "doc": {
                    "description": "Filters AMP template data.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.2"
                        },
                        {
                            "name": "param",
                            "content": "Template data.",
                            "types": [
                                "array"
                            ],
                            "variable": "$data"
                        },
                        {
                            "name": "param",
                            "content": "Post.",
                            "types": [
                                "\\WP_Post"
                            ],
                            "variable": "$post"
                        }
                    ]
                }
            },
            "3": {
                "name": "amp_post_template_dir",
                "line": 177,
                "end_line": 177,
                "type": "filter",
                "arguments": [
                    "AMP__DIR__ . '\/templates'"
                ],
                "doc": {
                    "description": "Filters the Reader template directory.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.3.3"
                        }
                    ]
                }
            },
            "6": {
                "name": "amp_post_template_customizer_settings",
                "line": 428,
                "end_line": 428,
                "type": "filter",
                "arguments": [
                    "$settings",
                    "$this->post"
                ],
                "doc": {
                    "description": "Filter AMP Customizer settings.",
                    "long_description": "Inject your Customizer settings here to make them accessible via the getter in your custom style.php template.\n Example:\n     echo esc_html( $this->get_customizer_setting( 'your_setting_key', 'your_default_value' ) );",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.4"
                        },
                        {
                            "name": "param",
                            "content": "Array of AMP Customizer settings.",
                            "types": [
                                "array"
                            ],
                            "variable": "$settings"
                        },
                        {
                            "name": "param",
                            "content": "Current post object.",
                            "types": [
                                "\\WP_Post"
                            ],
                            "variable": "$post"
                        }
                    ]
                }
            },
            "7": {
                "name": "amp_post_template_file",
                "line": 470,
                "end_line": 470,
                "type": "filter",
                "arguments": [
                    "$file",
                    "$template_type",
                    "$this->post"
                ],
                "doc": {
                    "description": "Filters the template file being loaded for a given template type.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.2"
                        },
                        {
                            "name": "param",
                            "content": "Template file.",
                            "types": [
                                "string"
                            ],
                            "variable": "$file"
                        },
                        {
                            "name": "param",
                            "content": "Template type.",
                            "types": [
                                "string"
                            ],
                            "variable": "$template_type"
                        },
                        {
                            "name": "param",
                            "content": "Post.",
                            "types": [
                                "\\WP_Post"
                            ],
                            "variable": "$post"
                        }
                    ]
                }
            },
            "8": {
                "name": "amp_post_template_include_{$template_type}",
                "line": 484,
                "end_line": 484,
                "type": "action",
                "arguments": [
                    "$this"
                ],
                "doc": {
                    "description": "Fires before including a template.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.4"
                        },
                        {
                            "name": "param",
                            "content": "Post template.",
                            "types": [
                                "\\AMP_Post_Template"
                            ],
                            "variable": "$this"
                        }
                    ]
                }
            }
        }
    },
    "95": {
        "file": {
            "description": "Class AMP_DOM_Utils.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/utils\/class-amp-dom-utils.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [
            {
                "name": "AMP_DOM_Utils",
                "namespace": "global",
                "line": 20,
                "end_line": 438,
                "final": false,
                "abstract": false,
                "extends": "",
                "implements": [],
                "properties": [],
                "methods": {
                    "0": {
                        "name": "get_dom",
                        "namespace": "",
                        "aliases": {
                            "Options": "\\AmpProject\\AmpWP\\Dom\\Options",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 58,
                        "end_line": 68,
                        "final": false,
                        "abstract": false,
                        "static": true,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$document",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$encoding",
                                "default": "null",
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Return a valid Dom\\Document representing HTML document passed as a parameter.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.7"
                                },
                                {
                                    "name": "see",
                                    "content": "",
                                    "refers": "AMP_DOM_Utils::get_content_from_dom_node()"
                                },
                                {
                                    "name": "codeCoverageIgnore",
                                    "content": ""
                                },
                                {
                                    "name": "deprecated",
                                    "content": "Use AmpProject\\Dom\\Document::fromHtml( $html, $encoding ) instead.",
                                    "description": "Use AmpProject\\Dom\\Document::fromHtml( $html, $encoding ) instead."
                                },
                                {
                                    "name": "param",
                                    "content": "Valid HTML document to be represented by a Dom\\Document.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$document"
                                },
                                {
                                    "name": "param",
                                    "content": "Optional. Encoding to use for the content.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$encoding"
                                },
                                {
                                    "name": "return",
                                    "content": "Returns Dom\\Document, or false if conversion failed.",
                                    "types": [
                                        "\\AmpProject\\Dom\\Document",
                                        "false"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "_deprecated_function",
                                    "line": 59,
                                    "end_line": 59,
                                    "deprecation_version": "1.5.0"
                                }
                            ],
                            "methods": [
                                {
                                    "name": "fromHtml",
                                    "class": "\\AmpProject\\Dom\\Document",
                                    "static": true,
                                    "line": 67,
                                    "end_line": 67
                                }
                            ]
                        }
                    },
                    "1": {
                        "name": "is_valid_head_node",
                        "namespace": "",
                        "aliases": {
                            "Options": "\\AmpProject\\AmpWP\\Dom\\Options",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 81,
                        "end_line": 84,
                        "final": false,
                        "abstract": false,
                        "static": true,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$node",
                                "default": null,
                                "type": "\\DOMNode"
                            }
                        ],
                        "doc": {
                            "description": "Determine whether a node can be in the head.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "link",
                                    "content": "https:\/\/github.com\/ampproject\/amphtml\/blob\/445d6e3be8a5063e2738c6f90fdcd57f2b6208be\/validator\/engine\/htmlparser.js#L83-L100",
                                    "link": "https:\/\/github.com\/ampproject\/amphtml\/blob\/445d6e3be8a5063e2738c6f90fdcd57f2b6208be\/validator\/engine\/htmlparser.js#L83-L100"
                                },
                                {
                                    "name": "link",
                                    "content": "https:\/\/www.w3.org\/TR\/html5\/document-metadata.html",
                                    "link": "https:\/\/www.w3.org\/TR\/html5\/document-metadata.html"
                                },
                                {
                                    "name": "codeCoverageIgnore",
                                    "content": ""
                                },
                                {
                                    "name": "deprecated",
                                    "content": "Use AmpProject\\Dom\\Document->isValidHeadNode() instead.",
                                    "description": "Use AmpProject\\Dom\\Document->isValidHeadNode() instead."
                                },
                                {
                                    "name": "param",
                                    "content": "Node.",
                                    "types": [
                                        "\\DOMNode"
                                    ],
                                    "variable": "$node"
                                },
                                {
                                    "name": "return",
                                    "content": "Whether valid head node.",
                                    "types": [
                                        "bool"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "_deprecated_function",
                                    "line": 82,
                                    "end_line": 82,
                                    "deprecation_version": "1.5.0"
                                }
                            ],
                            "methods": [
                                {
                                    "name": "isValidHeadNode",
                                    "class": "\\AmpProject\\Dom\\Document::fromNode($node)",
                                    "static": false,
                                    "line": 83,
                                    "end_line": 83
                                },
                                {
                                    "name": "fromNode",
                                    "class": "\\AmpProject\\Dom\\Document",
                                    "static": true,
                                    "line": 83,
                                    "end_line": 83
                                }
                            ]
                        }
                    },
                    "2": {
                        "name": "get_dom_from_content",
                        "namespace": "",
                        "aliases": {
                            "Options": "\\AmpProject\\AmpWP\\Dom\\Options",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 98,
                        "end_line": 115,
                        "final": false,
                        "abstract": false,
                        "static": true,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$content",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$encoding",
                                "default": "null",
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Return a valid Dom\\Document representing arbitrary HTML content passed as a parameter.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "see",
                                    "content": "function get_content_from_dom()",
                                    "refers": "Reciprocal"
                                },
                                {
                                    "name": "since",
                                    "content": "0.2"
                                },
                                {
                                    "name": "param",
                                    "content": "Valid HTML content to be represented by a Dom\\Document.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$content"
                                },
                                {
                                    "name": "param",
                                    "content": "Optional. Encoding to use for the content. Defaults to `get_bloginfo( 'charset' )`.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$encoding"
                                },
                                {
                                    "name": "return",
                                    "content": "Returns a DOM document, or false if conversion failed.",
                                    "types": [
                                        "\\AmpProject\\Dom\\Document",
                                        "false"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "get_bloginfo",
                                    "line": 101,
                                    "end_line": 101
                                }
                            ],
                            "methods": [
                                {
                                    "name": "fromHtml",
                                    "class": "\\AmpProject\\Dom\\Document",
                                    "static": true,
                                    "line": 114,
                                    "end_line": 114
                                }
                            ]
                        }
                    },
                    "3": {
                        "name": "get_content_from_dom",
                        "namespace": "",
                        "aliases": {
                            "Options": "\\AmpProject\\AmpWP\\Dom\\Options",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 126,
                        "end_line": 132,
                        "final": false,
                        "abstract": false,
                        "static": true,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$dom",
                                "default": null,
                                "type": "\\AmpProject\\Dom\\Document"
                            }
                        ],
                        "doc": {
                            "description": "Return valid HTML *body* content extracted from the Dom\\Document passed as a parameter.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.2"
                                },
                                {
                                    "name": "see",
                                    "content": "Reciprocal function.",
                                    "refers": "AMP_DOM_Utils::get_content_from_dom_node()"
                                },
                                {
                                    "name": "param",
                                    "content": "Represents an HTML document from which to extract HTML content.",
                                    "types": [
                                        "\\AmpProject\\Dom\\Document"
                                    ],
                                    "variable": "$dom"
                                },
                                {
                                    "name": "return",
                                    "content": "Returns the HTML content of the body element represented in the Dom\\Document.",
                                    "types": [
                                        "string"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "preg_replace",
                                    "line": 127,
                                    "end_line": 131
                                }
                            ],
                            "methods": [
                                {
                                    "name": "saveHTML",
                                    "class": "$dom",
                                    "static": false,
                                    "line": 130,
                                    "end_line": 130
                                }
                            ]
                        }
                    },
                    "4": {
                        "name": "get_content_from_dom_node",
                        "namespace": "",
                        "aliases": {
                            "Options": "\\AmpProject\\AmpWP\\Dom\\Options",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 147,
                        "end_line": 150,
                        "final": false,
                        "abstract": false,
                        "static": true,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$dom",
                                "default": null,
                                "type": "\\AmpProject\\Dom\\Document"
                            },
                            {
                                "name": "$node",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Return valid HTML content extracted from the DOMNode passed as a parameter.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.6"
                                },
                                {
                                    "name": "see",
                                    "content": "Where the operations in this method are mirrored.",
                                    "refers": "AMP_DOM_Utils::get_dom()"
                                },
                                {
                                    "name": "see",
                                    "content": "Reciprocal function.",
                                    "refers": "AMP_DOM_Utils::get_content_from_dom()"
                                },
                                {
                                    "name": "codeCoverageIgnore",
                                    "content": ""
                                },
                                {
                                    "name": "deprecated",
                                    "content": "Use Dom\\Document->saveHtml( $node ) instead.",
                                    "description": "Use Dom\\Document->saveHtml( $node ) instead."
                                },
                                {
                                    "name": "param",
                                    "content": "Represents an HTML document.",
                                    "types": [
                                        "\\AmpProject\\Dom\\Document"
                                    ],
                                    "variable": "$dom"
                                },
                                {
                                    "name": "param",
                                    "content": "Represents an HTML element of the $dom from which to extract HTML content.",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": "$node"
                                },
                                {
                                    "name": "return",
                                    "content": "Returns the HTML content represented in the DOMNode",
                                    "types": [
                                        "string"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "_deprecated_function",
                                    "line": 148,
                                    "end_line": 148,
                                    "deprecation_version": "1.5.0"
                                }
                            ],
                            "methods": [
                                {
                                    "name": "saveHTML",
                                    "class": "$dom",
                                    "static": false,
                                    "line": 149,
                                    "end_line": 149
                                }
                            ]
                        }
                    },
                    "5": {
                        "name": "create_node",
                        "namespace": "",
                        "aliases": {
                            "Options": "\\AmpProject\\AmpWP\\Dom\\Options",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 163,
                        "end_line": 168,
                        "final": false,
                        "abstract": false,
                        "static": true,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$dom",
                                "default": null,
                                "type": "\\AmpProject\\Dom\\Document"
                            },
                            {
                                "name": "$tag",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$attributes",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Create a new node w\/attributes (a DOMElement) and add to the passed Dom\\Document.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.2"
                                },
                                {
                                    "name": "param",
                                    "content": "A representation of an HTML document to add the new node to.",
                                    "types": [
                                        "\\AmpProject\\Dom\\Document"
                                    ],
                                    "variable": "$dom"
                                },
                                {
                                    "name": "param",
                                    "content": "A valid HTML element tag for the element to be added.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$tag"
                                },
                                {
                                    "name": "param",
                                    "content": "One of more valid attributes for the new node.",
                                    "types": [
                                        "string[]"
                                    ],
                                    "variable": "$attributes"
                                },
                                {
                                    "name": "return",
                                    "content": "The element for the given $tag, or false on failure",
                                    "types": [
                                        "\\AmpProject\\Dom\\Element",
                                        "false"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "createElement",
                                    "class": "$dom",
                                    "static": false,
                                    "line": 164,
                                    "end_line": 164
                                },
                                {
                                    "name": "add_attributes_to_node",
                                    "class": "\\AMP_DOM_Utils",
                                    "static": true,
                                    "line": 165,
                                    "end_line": 165
                                }
                            ]
                        }
                    },
                    "6": {
                        "name": "get_node_attributes_as_assoc_array",
                        "namespace": "",
                        "aliases": {
                            "Options": "\\AmpProject\\AmpWP\\Dom\\Options",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 180,
                        "end_line": 191,
                        "final": false,
                        "abstract": false,
                        "static": true,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$node",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Extract a DOMElement node's HTML element attributes and return as an array.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.2"
                                },
                                {
                                    "name": "param",
                                    "content": "Represents an HTML element for which to extract attributes.",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": "$node"
                                },
                                {
                                    "name": "return",
                                    "content": "The attributes for the passed node, or an                  empty array if it has no attributes.",
                                    "types": [
                                        "string[]"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "hasAttributes",
                                    "class": "$node",
                                    "static": false,
                                    "line": 182,
                                    "end_line": 182
                                }
                            ]
                        }
                    },
                    "7": {
                        "name": "add_attributes_to_node",
                        "namespace": "",
                        "aliases": {
                            "Options": "\\AmpProject\\AmpWP\\Dom\\Options",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 201,
                        "end_line": 214,
                        "final": false,
                        "abstract": false,
                        "static": true,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$node",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$attributes",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Add one or more HTML element attributes to a node's DOMElement.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.2"
                                },
                                {
                                    "name": "param",
                                    "content": "Represents an HTML element.",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": "$node"
                                },
                                {
                                    "name": "param",
                                    "content": "One or more attributes for the node's HTML element.",
                                    "types": [
                                        "string[]"
                                    ],
                                    "variable": "$attributes"
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "setAttribute",
                                    "class": "$node",
                                    "static": false,
                                    "line": 204,
                                    "end_line": 204
                                }
                            ]
                        }
                    },
                    "8": {
                        "name": "is_node_empty",
                        "namespace": "",
                        "aliases": {
                            "Options": "\\AmpProject\\AmpWP\\Dom\\Options",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 226,
                        "end_line": 228,
                        "final": false,
                        "abstract": false,
                        "static": true,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$node",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Determines if a DOMElement's node is empty or not.",
                            "long_description": ".",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "0.2"
                                },
                                {
                                    "name": "param",
                                    "content": "Represents an HTML element.",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": "$node"
                                },
                                {
                                    "name": "return",
                                    "content": "Returns true if the DOMElement has no child nodes and              the textContent property of the DOMElement is empty;              Otherwise it returns false.",
                                    "types": [
                                        "bool"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "hasChildNodes",
                                    "class": "$node",
                                    "static": false,
                                    "line": 227,
                                    "end_line": 227
                                }
                            ]
                        }
                    },
                    "11": {
                        "name": "has_class",
                        "namespace": "",
                        "aliases": {
                            "Options": "\\AmpProject\\AmpWP\\Dom\\Options",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 297,
                        "end_line": 305,
                        "final": false,
                        "abstract": false,
                        "static": true,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$element",
                                "default": null,
                                "type": "\\DOMElement"
                            },
                            {
                                "name": "$class",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Check whether a given element has a specific class.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "1.4.0"
                                },
                                {
                                    "name": "param",
                                    "content": "Element to check the classes of.",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": "$element"
                                },
                                {
                                    "name": "param",
                                    "content": "Class to check for.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$class"
                                },
                                {
                                    "name": "return",
                                    "content": "Whether the element has the requested class.",
                                    "types": [
                                        "bool"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "hasAttribute",
                                    "class": "$element",
                                    "static": false,
                                    "line": 298,
                                    "end_line": 298
                                },
                                {
                                    "name": "getAttribute",
                                    "class": "$element",
                                    "static": false,
                                    "line": 302,
                                    "end_line": 302
                                }
                            ],
                            "functions": [
                                {
                                    "name": "in_array",
                                    "line": 304,
                                    "end_line": 304
                                },
                                {
                                    "name": "preg_split",
                                    "line": 304,
                                    "end_line": 304
                                }
                            ]
                        }
                    },
                    "12": {
                        "name": "get_element_id",
                        "namespace": "",
                        "aliases": {
                            "Options": "\\AmpProject\\AmpWP\\Dom\\Options",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 321,
                        "end_line": 329,
                        "final": false,
                        "abstract": false,
                        "static": true,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$element",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$prefix",
                                "default": "'amp-wp-id'",
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Get the ID for an element.",
                            "long_description": "If the element does not have an ID, create one first.",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "1.4.0"
                                },
                                {
                                    "name": "since",
                                    "content": "1.5.1",
                                    "description": "Deprecated for AmpProject\\Dom\\Document::getElementId()"
                                },
                                {
                                    "name": "deprecated",
                                    "content": "Use AmpProject\\Dom\\Document::getElementId() instead.",
                                    "description": "Use AmpProject\\Dom\\Document::getElementId() instead."
                                },
                                {
                                    "name": "param",
                                    "content": "Element to get the ID for.",
                                    "types": [
                                        "\\DOMElement",
                                        "\\AmpProject\\Dom\\Element"
                                    ],
                                    "variable": "$element"
                                },
                                {
                                    "name": "param",
                                    "content": "Optional. Defaults to 'amp-wp-id'.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$prefix"
                                },
                                {
                                    "name": "return",
                                    "content": "ID to use.",
                                    "types": [
                                        "string"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "_deprecated_function",
                                    "line": 322,
                                    "end_line": 326,
                                    "deprecation_version": "1.5.1"
                                }
                            ],
                            "methods": [
                                {
                                    "name": "getElementId",
                                    "class": "\\AmpProject\\Dom\\Document::fromNode($element)",
                                    "static": false,
                                    "line": 328,
                                    "end_line": 328
                                },
                                {
                                    "name": "fromNode",
                                    "class": "\\AmpProject\\Dom\\Document",
                                    "static": true,
                                    "line": 328,
                                    "end_line": 328
                                }
                            ]
                        }
                    },
                    "13": {
                        "name": "add_amp_action",
                        "namespace": "",
                        "aliases": {
                            "Options": "\\AmpProject\\AmpWP\\Dom\\Options",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 343,
                        "end_line": 359,
                        "final": false,
                        "abstract": false,
                        "static": true,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$element",
                                "default": null,
                                "type": "\\DOMElement"
                            },
                            {
                                "name": "$event",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$action",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Register an AMP action to an event on a given element.",
                            "long_description": "If the element already contains one or more events or actions, the method will assemble them in a smart way.",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "1.4.0"
                                },
                                {
                                    "name": "param",
                                    "content": "Element to add an action to.",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": "$element"
                                },
                                {
                                    "name": "param",
                                    "content": "Event to trigger the action on.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$event"
                                },
                                {
                                    "name": "param",
                                    "content": "Action to add.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$action"
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "hasAttribute",
                                    "class": "$element",
                                    "static": false,
                                    "line": 346,
                                    "end_line": 346
                                },
                                {
                                    "name": "setAttribute",
                                    "class": "$element",
                                    "static": false,
                                    "line": 348,
                                    "end_line": 348
                                },
                                {
                                    "name": "setAttribute",
                                    "class": "$element",
                                    "static": false,
                                    "line": 352,
                                    "end_line": 358
                                },
                                {
                                    "name": "merge_amp_actions",
                                    "class": "\\AMP_DOM_Utils",
                                    "static": true,
                                    "line": 354,
                                    "end_line": 357
                                },
                                {
                                    "name": "getAttribute",
                                    "class": "$element",
                                    "static": false,
                                    "line": 355,
                                    "end_line": 355
                                }
                            ]
                        }
                    },
                    "14": {
                        "name": "merge_amp_actions",
                        "namespace": "",
                        "aliases": {
                            "Options": "\\AmpProject\\AmpWP\\Dom\\Options",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 370,
                        "end_line": 408,
                        "final": false,
                        "abstract": false,
                        "static": true,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$first",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$second",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Merge two sets of AMP events & actions.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "since",
                                    "content": "1.4.0"
                                },
                                {
                                    "name": "param",
                                    "content": "First event\/action string.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$first"
                                },
                                {
                                    "name": "param",
                                    "content": "First event\/action string.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$second"
                                },
                                {
                                    "name": "return",
                                    "content": "Merged event\/action string.",
                                    "types": [
                                        "string"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "preg_match_all",
                                    "line": 374,
                                    "end_line": 374
                                },
                                {
                                    "name": "array_walk",
                                    "line": 388,
                                    "end_line": 401
                                },
                                {
                                    "name": "preg_match_all",
                                    "line": 392,
                                    "end_line": 392
                                },
                                {
                                    "name": "array_merge",
                                    "line": 399,
                                    "end_line": 399
                                },
                                {
                                    "name": "implode",
                                    "line": 403,
                                    "end_line": 403
                                },
                                {
                                    "name": "array_unique",
                                    "line": 403,
                                    "end_line": 403
                                },
                                {
                                    "name": "array_filter",
                                    "line": 403,
                                    "end_line": 403
                                },
                                {
                                    "name": "implode",
                                    "line": 407,
                                    "end_line": 407
                                }
                            ]
                        }
                    },
                    "15": {
                        "name": "copy_attributes",
                        "namespace": "",
                        "aliases": {
                            "Options": "\\AmpProject\\AmpWP\\Dom\\Options",
                            "Document": "\\AmpProject\\Dom\\Document",
                            "Element": "\\AmpProject\\Dom\\Element",
                            "Tag": "\\AmpProject\\Html\\Tag"
                        },
                        "line": 418,
                        "end_line": 437,
                        "final": false,
                        "abstract": false,
                        "static": true,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$attributes",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$from",
                                "default": null,
                                "type": "\\DOMElement"
                            },
                            {
                                "name": "$to",
                                "default": null,
                                "type": "\\DOMElement"
                            },
                            {
                                "name": "$default_separator",
                                "default": "','",
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Copy one or more attributes from one element to the other.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "Attribute name or array of attribute names to copy.",
                                    "types": [
                                        "array",
                                        "string"
                                    ],
                                    "variable": "$attributes"
                                },
                                {
                                    "name": "param",
                                    "content": "DOM element to copy the attributes from.",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": "$from"
                                },
                                {
                                    "name": "param",
                                    "content": "DOM element to copy the attributes to.",
                                    "types": [
                                        "\\DOMElement"
                                    ],
                                    "variable": "$to"
                                },
                                {
                                    "name": "param",
                                    "content": "Default separator to use for multiple values if the attribute is not known.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$default_separator"
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "hasAttribute",
                                    "class": "$from",
                                    "static": false,
                                    "line": 420,
                                    "end_line": 420
                                },
                                {
                                    "name": "getAttribute",
                                    "class": "$from",
                                    "static": false,
                                    "line": 421,
                                    "end_line": 421
                                },
                                {
                                    "name": "hasAttribute",
                                    "class": "$to",
                                    "static": false,
                                    "line": 422,
                                    "end_line": 422
                                },
                                {
                                    "name": "merge_amp_actions",
                                    "class": "\\AMP_DOM_Utils",
                                    "static": true,
                                    "line": 425,
                                    "end_line": 425
                                },
                                {
                                    "name": "getAttribute",
                                    "class": "$to",
                                    "static": false,
                                    "line": 425,
                                    "end_line": 425
                                },
                                {
                                    "name": "getAttribute",
                                    "class": "$to",
                                    "static": false,
                                    "line": 428,
                                    "end_line": 428
                                },
                                {
                                    "name": "getAttribute",
                                    "class": "$to",
                                    "static": false,
                                    "line": 431,
                                    "end_line": 431
                                },
                                {
                                    "name": "setAttribute",
                                    "class": "$to",
                                    "static": false,
                                    "line": 434,
                                    "end_line": 434
                                }
                            ]
                        }
                    }
                },
                "doc": {
                    "description": "Class AMP_DOM_Utils",
                    "long_description": "Functionality to simplify working with Dom\\Documents and DOMElements.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.2"
                        }
                    ]
                }
            }
        ],
        "hooks": []
    },
    "97": {
        "file": {
            "description": "Class AMP_Image_Dimension_Extractor",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/utils\/class-amp-image-dimension-extractor.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [],
        "hooks": [
            {
                "name": "amp_extract_image_dimensions_batch",
                "line": 69,
                "end_line": 69,
                "type": "filter",
                "arguments": [
                    "$extracted_dimensions"
                ],
                "doc": {
                    "description": "Filters the dimensions extracted from image URLs.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.5.1"
                        },
                        {
                            "name": "param",
                            "content": "Extracted dimensions, initially mapping images URLs to false.",
                            "types": [
                                "array"
                            ],
                            "variable": "$extracted_dimensions"
                        }
                    ]
                }
            },
            {
                "name": "amp_normalized_dimension_extractor_image_url",
                "line": 132,
                "end_line": 132,
                "type": "filter",
                "arguments": [
                    "$normalized_url",
                    "$url"
                ],
                "doc": {
                    "description": "Apply filters on the normalized image URL for dimension extraction.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.1"
                        },
                        {
                            "name": "param",
                            "content": "Normalized image URL.",
                            "types": [
                                "string"
                            ],
                            "variable": "$normalized_url"
                        },
                        {
                            "name": "param",
                            "content": "Original image URL.",
                            "types": [
                                "string"
                            ],
                            "variable": "$url"
                        }
                    ]
                }
            },
            {
                "name": "amp_extract_image_dimensions_batch_callbacks_registered",
                "line": 151,
                "end_line": 151,
                "type": "action",
                "arguments": [],
                "doc": {
                    "description": "Fires after the amp_extract_image_dimensions_batch filter has been added to extract by downloading images.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.5.1"
                        }
                    ]
                }
            },
            {
                "name": "amp_extract_image_dimensions_get_user_agent",
                "line": 368,
                "end_line": 368,
                "type": "filter",
                "arguments": [
                    "self::get_default_user_agent()"
                ],
                "doc": {
                    "description": "Filters the user agent for obtaining the image dimensions.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "param",
                            "content": "User agent.",
                            "types": [
                                "string"
                            ],
                            "variable": "$user_agent"
                        }
                    ]
                }
            }
        ]
    },
    "101": {
        "file": {
            "description": "Class AMP_Validation_Error_Taxonomy",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/validation\/class-amp-validation-error-taxonomy.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "includes": [
            {
                "name": "",
                "line": 950,
                "type": "Require"
            },
            {
                "name": "",
                "line": 991,
                "type": "Require"
            }
        ],
        "classes": [],
        "hooks": [
            {
                "name": "amp_validation_error_sanitized",
                "line": 528,
                "end_line": 528,
                "type": "filter",
                "arguments": [
                    "null",
                    "$error"
                ],
                "doc": {
                    "description": "Filters whether the validation error should be sanitized.",
                    "long_description": "Returning true this indicates that the validation error is acceptable and should not be considered a blocker to render AMP. Returning null means that the default status should be used.\n Note that the $node is not passed here to ensure that the filter can be applied on validation errors that have been stored. Likewise, the $sources are also omitted because these are only available during an explicit validation request and so they are not suitable for plugins to vary sanitization by.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.0"
                        },
                        {
                            "name": "see",
                            "content": "Which controls whether an error is initially accepted or rejected for sanitization.",
                            "refers": "AMP_Validation_Manager::is_sanitization_auto_accepted()"
                        },
                        {
                            "name": "param",
                            "content": "Whether sanitized; this is initially null, and changing it to bool causes the validation error to be forced.",
                            "types": [
                                "null",
                                "bool"
                            ],
                            "variable": "$sanitized"
                        },
                        {
                            "name": "param",
                            "content": "Validation error being sanitized.",
                            "types": [
                                "array"
                            ],
                            "variable": "$error"
                        }
                    ]
                }
            },
            {
                "name": "amp_validation_error_source_file_editor_url_template",
                "line": 2384,
                "end_line": 2384,
                "type": "filter",
                "arguments": [
                    "null"
                ],
                "doc": {
                    "description": "Filters the template for the URL for linking to an external editor to open a file for editing.",
                    "long_description": "Users of IDEs that support opening files in via web protocols can use this filter to override the edit link to result in their editor opening rather than the theme\/plugin editor.\n The initial filtered value is null, requiring extension plugins to supply the URL template string themselves. If no template string is provided, links to the theme\/plugin editors will be provided if available. For example, for an extension plugin to cause file edit links to open in PhpStorm, the following filter can be used:\n     add_filter( 'amp_validation_error_source_file_editor_url_template', function () {         return 'phpstorm:\/\/open?file={{file}}&line={{line}}';     } );\n For a template to be considered, the string '{{file}}' must be present in the filtered value.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.4"
                        },
                        {
                            "name": "param",
                            "content": "Editor URL template.",
                            "types": [
                                "string",
                                "null"
                            ],
                            "variable": "$editor_url_template"
                        }
                    ]
                }
            },
            {
                "name": "amp_validation_error_source_file_path",
                "line": 2420,
                "end_line": 2420,
                "type": "filter",
                "arguments": [
                    "$file_path",
                    "$source"
                ],
                "doc": {
                    "description": "Filters the file path to be opened in an external editor for a given AMP validation error source.",
                    "long_description": "This is useful to map the file path from inside of a Docker container or VM to the host machine.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.4"
                        },
                        {
                            "name": "param",
                            "content": "Editor URL template.",
                            "types": [
                                "string",
                                "null"
                            ],
                            "variable": "$editor_url_template"
                        },
                        {
                            "name": "param",
                            "content": "Source information.",
                            "types": [
                                "array"
                            ],
                            "variable": "$source"
                        }
                    ]
                }
            }
        ]
    },
    "102": {
        "file": {
            "description": "Class AMP_Validation_Manager",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "includes\/validation\/class-amp-validation-manager.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "includes": [
            {
                "name": "",
                "line": 2615,
                "type": "Require"
            }
        ],
        "classes": [],
        "hooks": [
            {
                "name": "amp_validation_error_default_sanitized",
                "line": 352,
                "end_line": 352,
                "type": "filter",
                "arguments": [
                    "$accepted",
                    "$error"
                ],
                "doc": {
                    "description": "Filters whether sanitization is accepted for a newly-encountered validation error .",
                    "long_description": "This only applies to validation errors that have not been encountered before. To override the sanitization status of existing validation errors, use the `amp_validation_error_sanitized` filter.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.4"
                        },
                        {
                            "name": "see",
                            "content": "",
                            "refers": "AMP_Validation_Error_Taxonomy::get_validation_error_sanitization()"
                        },
                        {
                            "name": "param",
                            "content": "Default accepted.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$accepted"
                        },
                        {
                            "name": "param",
                            "content": "Validation error. May be null when asking if accepting sanitization is enabled by default.",
                            "types": [
                                "array",
                                "null"
                            ],
                            "variable": "$error"
                        }
                    ]
                }
            },
            {
                "name": "amp_validation_error",
                "line": 829,
                "end_line": 829,
                "type": "filter",
                "arguments": [
                    "$error",
                    "compact('node')"
                ],
                "doc": {
                    "description": "Filters the validation error array.",
                    "long_description": "This allows plugins to add amend additional properties which can help with more accurately identifying a validation error beyond the name of the parent node and the element's attributes. The $sources are also omitted because these are only available during an explicit validation request and so they are not suitable for plugins to vary sanitization by. If looking to force a validation error to be ignored, use the 'amp_validation_error_sanitized' filter instead of attempting to return an empty value with this filter (as that is not supported).",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.0"
                        },
                        {
                            "name": "param",
                            "content": "Validation error to be printed.",
                            "types": [
                                "array"
                            ],
                            "variable": "$error"
                        },
                        {
                            "name": "param",
                            "content": "{     Context data for validation error sanitization.     @type DOMNode $node Node for which the validation error is being reported. May be null. }",
                            "types": [
                                "array"
                            ],
                            "variable": "$context"
                        }
                    ]
                }
            }
        ]
    },
    "108": {
        "file": {
            "description": "Add new tab (AMP) in theme install screen in WordPress admin.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "Ampproject\\Ampwp"
                }
            ]
        },
        "path": "src\/Admin\/AmpThemes.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "includes": [
            {
                "name": "",
                "line": 100,
                "type": "Require"
            },
            {
                "name": "",
                "line": 188,
                "type": "Require"
            }
        ],
        "classes": [],
        "hooks": [
            {
                "name": "amp_compatible_ecosystem_shown",
                "line": 85,
                "end_line": 85,
                "type": "filter",
                "arguments": [
                    "true",
                    "'themes'"
                ],
                "doc": {
                    "description": "Filters whether to show AMP compatible ecosystem in the admin.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.2"
                        },
                        {
                            "name": "param",
                            "content": "Whether to show AMP-compatible themes and plugins in the admin.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$shown"
                        },
                        {
                            "name": "param",
                            "content": "The type of ecosystem component being shown. May be either 'themes' or 'plugins'.",
                            "types": [
                                "string"
                            ],
                            "variable": "$type"
                        }
                    ]
                }
            }
        ]
    },
    "113": {
        "file": {
            "description": "Class OptionsMenu",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "Ampproject\\Ampwp"
                }
            ]
        },
        "path": "src\/Admin\/OptionsMenu.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "includes": [
            {
                "name": "",
                "line": 156,
                "type": "Require Once"
            },
            {
                "name": "",
                "line": 199,
                "type": "Require"
            },
            {
                "name": "",
                "line": 220,
                "type": "Require"
            }
        ],
        "classes": [],
        "hooks": [
            {
                "name": "amp_options_menu_is_enabled",
                "line": 91,
                "end_line": 91,
                "type": "filter",
                "arguments": [
                    "true"
                ],
                "doc": {
                    "description": "Filter whether to enable the AMP settings.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.5"
                        },
                        {
                            "name": "param",
                            "content": "Whether to enable the AMP settings. Default true.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$enable"
                        }
                    ]
                }
            }
        ]
    },
    "119": {
        "file": {
            "description": "Fetches and formats data for AMP reader themes.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AMP"
                },
                {
                    "name": "since",
                    "content": "2.0"
                }
            ]
        },
        "path": "src\/Admin\/ReaderThemes.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "includes": [
            {
                "name": "",
                "line": 220,
                "type": "Require Once"
            },
            {
                "name": "",
                "line": 389,
                "type": "Require Once"
            },
            {
                "name": "",
                "line": 393,
                "type": "Require Once"
            },
            {
                "name": "",
                "line": 397,
                "type": "Require Once"
            }
        ],
        "classes": [],
        "hooks": [
            {
                "name": "amp_reader_themes",
                "line": 127,
                "end_line": 127,
                "type": "filter",
                "arguments": [
                    "$themes"
                ],
                "doc": {
                    "description": "Filters supported reader themes.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "param",
                            "content": "[     Reader theme data.     {         @type string         $name           Theme name.         @type string         $slug           Theme slug.         @type string         $slug           URL of theme preview.         @type string         $screenshot_url The URL of a mobile screenshot. Note: if this is empty, the theme may not display.         @type string         $homepage       A link to a page with more information about the theme.         @type string         $description    A description of the theme.         @type string|boolean $requires       Minimum version of WordPress required by the theme. False if all versions are supported.         @type string|boolean $requires_php   Minimum version of PHP required by the theme. False if all versions are supported.         @type string         $download_link  A link to the theme's zip file. If empty, the plugin will attempt to download the theme from wordpress.org.     } ]",
                            "types": [
                                "array"
                            ],
                            "variable": "$themes"
                        }
                    ]
                }
            }
        ]
    },
    "121": {
        "file": {
            "description": "Class SiteHealth.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AmpProject\\AmpWP"
                }
            ]
        },
        "path": "src\/Admin\/SiteHealth.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [],
        "hooks": [
            {
                "name": "amp_page_cache_good_response_time_threshold",
                "line": 352,
                "end_line": 352,
                "type": "filter",
                "arguments": [
                    "600"
                ],
                "doc": {
                    "description": "Filters the threshold below which a response time is considered good.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.2.1"
                        },
                        {
                            "name": "param",
                            "content": "Threshold in milliseconds.",
                            "types": [
                                "int"
                            ],
                            "variable": "$threshold"
                        }
                    ]
                }
            }
        ]
    },
    "131": {
        "file": {
            "description": "Class MonitorCssTransientCaching.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AmpProject\\AmpWP"
                }
            ]
        },
        "path": "src\/BackgroundTask\/MonitorCssTransientCaching.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [],
        "hooks": [
            {
                "name": "amp_css_transient_monitoring_threshold",
                "line": 352,
                "end_line": 352,
                "type": "filter",
                "arguments": [
                    "self::DEFAULT_THRESHOLD"
                ],
                "doc": {
                    "description": "Filters the threshold to use for disabling transient caching of stylesheets.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.5.0"
                        },
                        {
                            "name": "param",
                            "content": "Maximum average number of transients per day.",
                            "types": [
                                "int"
                            ],
                            "variable": "$threshold"
                        }
                    ]
                }
            },
            {
                "name": "amp_css_transient_monitoring_sampling_range",
                "line": 373,
                "end_line": 373,
                "type": "filter",
                "arguments": [
                    "self::DEFAULT_SAMPLING_RANGE"
                ],
                "doc": {
                    "description": "Filters the sampling range to use for monitoring the transient caching of stylesheets.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.5.0"
                        },
                        {
                            "name": "param",
                            "content": "Sampling range in number of days.",
                            "types": [
                                "int"
                            ],
                            "variable": "$sampling_rage"
                        }
                    ]
                }
            }
        ]
    },
    "135": {
        "file": {
            "description": "Class ValidationDataGarbageCollection.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AmpProject\\AmpWP"
                }
            ]
        },
        "path": "src\/BackgroundTask\/ValidationDataGarbageCollection.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [],
        "hooks": [
            {
                "name": "amp_validation_data_gc_url_count",
                "line": 76,
                "end_line": 76,
                "type": "filter",
                "arguments": [
                    "100"
                ],
                "doc": {
                    "description": "Filters the count of eligible validated URLs that should be garbage collected.",
                    "long_description": "If this is filtered to be zero or less, then garbage collection is disabled.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.2"
                        },
                        {
                            "name": "param",
                            "content": "Validated URL count. Default 100.",
                            "types": [
                                "int"
                            ],
                            "variable": "$count"
                        }
                    ]
                }
            },
            {
                "name": "amp_validation_data_gc_before",
                "line": 89,
                "end_line": 89,
                "type": "filter",
                "arguments": [
                    "'1 week ago'"
                ],
                "doc": {
                    "description": "Filters the date before which validated URLs will be garbage collected.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.2"
                        },
                        {
                            "name": "param",
                            "content": "Date before which to find amp_validated_url posts to delete. Default '1 week ago'.                             Accepts strtotime()-compatible string, or array of 'year', 'month', 'day' values.",
                            "types": [
                                "string",
                                "array"
                            ],
                            "variable": "$before"
                        }
                    ]
                }
            },
            {
                "name": "amp_validation_data_gc_delete_empty_terms",
                "line": 100,
                "end_line": 100,
                "type": "filter",
                "arguments": [
                    "true"
                ],
                "doc": {
                    "description": "Filters whether to delete empty terms during validation garbage collection.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.2"
                        },
                        {
                            "name": "param",
                            "content": "Whether enabled. Default true.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$enabled"
                        }
                    ]
                }
            }
        ]
    },
    "152": {
        "file": {
            "description": "Class UserAccess.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0"
                },
                {
                    "name": "package",
                    "content": "AMP"
                }
            ]
        },
        "path": "src\/DevTools\/UserAccess.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [],
        "hooks": [
            {
                "name": "amp_dev_tools_user_default_enabled",
                "line": 112,
                "end_line": 112,
                "type": "filter",
                "arguments": [
                    "$enabled",
                    "$user->ID"
                ],
                "doc": {
                    "description": "Filters whether Developer Tools is enabled by default for a user.",
                    "long_description": "When Reader mode is active, Developer Tools is currently disabled by default.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.0.1"
                        },
                        {
                            "name": "param",
                            "content": "DevTools enabled.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$enabled"
                        },
                        {
                            "name": "param",
                            "content": "User ID.",
                            "types": [
                                "int"
                            ],
                            "variable": "$user_id"
                        }
                    ]
                }
            }
        ]
    },
    "188": {
        "file": {
            "description": "Class MobileRedirection.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AmpProject\\AmpWP"
                }
            ]
        },
        "path": "src\/MobileRedirection.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [],
        "hooks": {
            "0": {
                "name": "amp_pre_is_mobile",
                "line": 232,
                "end_line": 232,
                "type": "filter",
                "arguments": [
                    "null"
                ],
                "doc": {
                    "description": "Filters whether the current request is from a mobile device. This is provided as a means to short-circuit the normal determination of a mobile request below.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.0"
                        },
                        {
                            "name": "param",
                            "content": "Whether the current request is from a mobile device.",
                            "types": [
                                "null"
                            ],
                            "variable": "$is_mobile"
                        }
                    ]
                }
            },
            "1": {
                "name": "amp_mobile_client_side_redirection",
                "line": 293,
                "end_line": 293,
                "type": "filter",
                "arguments": [
                    "true"
                ],
                "doc": {
                    "description": "Filters whether mobile redirection should be done client-side (via JavaScript).",
                    "long_description": "If false, a server-side solution will be used instead (via PHP). It's important to verify that server-side redirection does not conflict with a site's page caching logic. To assist with this, you may need to hook into the `amp_pre_is_mobile` filter.\n Beware that disabling this will result in a cookie being set when the user decides to leave the mobile version. This may require updating the site's privacy policy or getting user consent for GDPR compliance. Nevertheless, since the cookie is not used for tracking this may not be necessary.\n Please note that this does not apply when in the Customizer preview or when in AMP Dev Mode (and thus possible Paired Browsing), since server-side redirects would not be able to be prevented as required.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.0"
                        },
                        {
                            "name": "param",
                            "content": "Whether JS redirection should be used to take mobile visitors to the AMP version.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$should_redirect_via_js"
                        }
                    ]
                }
            },
            "2": {
                "name": "amp_mobile_user_agents",
                "line": 324,
                "end_line": 324,
                "type": "filter",
                "arguments": [
                    "$default_user_agents"
                ],
                "doc": {
                    "description": "Filters the list of user agents used to determine if the user agent from the current request is a mobile one.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.0"
                        },
                        {
                            "name": "param",
                            "content": "List of mobile user agent search strings (and regex patterns).",
                            "types": [
                                "string[]"
                            ],
                            "variable": "$user_agents"
                        }
                    ]
                }
            },
            "4": {
                "name": "amp_mobile_version_switcher_styles_used",
                "line": 530,
                "end_line": 530,
                "type": "filter",
                "arguments": [
                    "true"
                ],
                "doc": {
                    "description": "Filters whether the default mobile version switcher styles are printed.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.0"
                        },
                        {
                            "name": "param",
                            "content": "Whether the styles are printed.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$used"
                        }
                    ]
                }
            },
            "5": {
                "name": "amp_mobile_version_switcher_link_text",
                "line": 575,
                "end_line": 575,
                "type": "filter",
                "arguments": [
                    "$text"
                ],
                "doc": {
                    "description": "Filters the text to be used in the mobile switcher link.",
                    "long_description": "Use the `amp_is_request()` function to determine whether you are filtering the text for the link to go to the non-AMP version or the AMP version.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "2.0"
                        },
                        {
                            "name": "param",
                            "content": "Link text to display.",
                            "types": [
                                "string"
                            ],
                            "variable": "$text"
                        }
                    ]
                }
            }
        }
    },
    "190": {
        "file": {
            "description": "Class AmpWPConfiguration.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AmpProject\\AmpWP"
                }
            ]
        },
        "path": "src\/Optimizer\/AmpWPConfiguration.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [],
        "hooks": [
            {
                "name": "amp_enable_ssr",
                "line": 52,
                "end_line": 52,
                "type": "filter",
                "arguments": [
                    "true"
                ],
                "doc": {
                    "description": "Filter whether the AMP Optimizer should use server-side rendering or not.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.5.0"
                        },
                        {
                            "name": "param",
                            "content": "Whether the AMP Optimizer should use server-side rendering or not.",
                            "types": [
                                "bool"
                            ],
                            "variable": "$enable_ssr"
                        }
                    ]
                }
            },
            {
                "name": "amp_optimizer_config",
                "line": 87,
                "end_line": 96,
                "type": "filter",
                "arguments": [
                    "array(self::KEY_TRANSFORMERS => $transformers, \\AmpProject\\Optimizer\\Transformer\\OptimizeHeroImages::class => array(\\AmpProject\\Optimizer\\Configuration\\OptimizeHeroImagesConfiguration::INLINE_STYLE_BACKUP_ATTRIBUTE => 'data-amp-original-style', \\AmpProject\\Optimizer\\Configuration\\OptimizeHeroImagesConfiguration::MAX_HERO_IMAGE_COUNT => PHP_INT_MAX))"
                ],
                "doc": {
                    "description": "Filter the configuration to be used for the AMP Optimizer.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "1.5.0"
                        },
                        {
                            "name": "param",
                            "content": "Associative array of configuration data.",
                            "types": [
                                "array"
                            ],
                            "variable": "$configuration"
                        }
                    ]
                }
            }
        ]
    },
    "198": {
        "file": {
            "description": "Class PairedRouting.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AmpProject\\AmpWP"
                }
            ]
        },
        "path": "src\/PairedRouting.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [],
        "hooks": [
            {
                "name": "amp_custom_paired_url_structure",
                "line": 252,
                "end_line": 252,
                "type": "filter",
                "arguments": [
                    "null"
                ],
                "doc": {
                    "description": "Filters to allow a custom paired URL structure to be used.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "param",
                            "content": "Paired URL structure class.",
                            "types": [
                                "string"
                            ],
                            "variable": "$structure_class"
                        }
                    ]
                }
            }
        ]
    },
    "199": {
        "file": {
            "description": "Class PairedUrl.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AmpProject\\AmpWP"
                }
            ]
        },
        "path": "src\/PairedUrl.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [
            {
                "name": "PairedUrl",
                "namespace": "AmpProject\\AmpWP",
                "line": 18,
                "end_line": 148,
                "final": true,
                "abstract": false,
                "extends": "",
                "implements": [
                    "\\AmpProject\\AmpWP\\Infrastructure\\Service"
                ],
                "properties": [],
                "methods": [
                    {
                        "name": "remove_query_var",
                        "namespace": "AmpProject\\AmpWP",
                        "aliases": {
                            "Service": "\\AmpProject\\AmpWP\\Infrastructure\\Service"
                        },
                        "line": 26,
                        "end_line": 30,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$url",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Strip paired query var.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "URL (or REQUEST_URI).",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$url"
                                },
                                {
                                    "name": "return",
                                    "content": "URL.",
                                    "types": [
                                        "string"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "remove_query_arg",
                                    "line": 27,
                                    "end_line": 27
                                },
                                {
                                    "name": "amp_get_slug",
                                    "line": 27,
                                    "end_line": 27
                                },
                                {
                                    "name": "str_replace",
                                    "line": 28,
                                    "end_line": 28
                                }
                            ]
                        }
                    },
                    {
                        "name": "has_path_suffix",
                        "namespace": "AmpProject\\AmpWP",
                        "aliases": {
                            "Service": "\\AmpProject\\AmpWP\\Infrastructure\\Service"
                        },
                        "line": 38,
                        "end_line": 46,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$url",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Determine whether the given URL has the endpoint suffix.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "URL (or REQUEST_URI).",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$url"
                                },
                                {
                                    "name": "return",
                                    "content": "Has endpoint suffix.",
                                    "types": [
                                        "bool"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "wp_parse_url",
                                    "line": 39,
                                    "end_line": 39
                                },
                                {
                                    "name": "sprintf",
                                    "line": 40,
                                    "end_line": 43
                                },
                                {
                                    "name": "preg_quote",
                                    "line": 42,
                                    "end_line": 42
                                },
                                {
                                    "name": "amp_get_slug",
                                    "line": 42,
                                    "end_line": 42
                                },
                                {
                                    "name": "preg_match",
                                    "line": 45,
                                    "end_line": 45
                                }
                            ]
                        }
                    },
                    {
                        "name": "remove_path_suffix",
                        "namespace": "AmpProject\\AmpWP",
                        "aliases": {
                            "Service": "\\AmpProject\\AmpWP\\Infrastructure\\Service"
                        },
                        "line": 54,
                        "end_line": 63,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$url",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Strip paired endpoint suffix.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "URL (or REQUEST_URI).",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$url"
                                },
                                {
                                    "name": "return",
                                    "content": "URL.",
                                    "types": [
                                        "string"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "preg_replace",
                                    "line": 55,
                                    "end_line": 62
                                },
                                {
                                    "name": "sprintf",
                                    "line": 56,
                                    "end_line": 59
                                },
                                {
                                    "name": "preg_quote",
                                    "line": 58,
                                    "end_line": 58
                                },
                                {
                                    "name": "amp_get_slug",
                                    "line": 58,
                                    "end_line": 58
                                }
                            ]
                        }
                    },
                    {
                        "name": "has_query_var",
                        "namespace": "AmpProject\\AmpWP",
                        "aliases": {
                            "Service": "\\AmpProject\\AmpWP\\Infrastructure\\Service"
                        },
                        "line": 71,
                        "end_line": 81,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$url",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Determine whether the given URL has the query var.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "URL (or REQUEST_URI).",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$url"
                                },
                                {
                                    "name": "return",
                                    "content": "Has query var.",
                                    "types": [
                                        "bool"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "wp_parse_url",
                                    "line": 72,
                                    "end_line": 72
                                },
                                {
                                    "name": "wp_parse_str",
                                    "line": 75,
                                    "end_line": 75
                                },
                                {
                                    "name": "amp_get_slug",
                                    "line": 76,
                                    "end_line": 76
                                }
                            ]
                        }
                    },
                    {
                        "name": "add_query_var",
                        "namespace": "AmpProject\\AmpWP",
                        "aliases": {
                            "Service": "\\AmpProject\\AmpWP\\Infrastructure\\Service"
                        },
                        "line": 90,
                        "end_line": 92,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$url",
                                "default": null,
                                "type": ""
                            },
                            {
                                "name": "$value",
                                "default": "'1'",
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Get paired AMP URL using query var (`?amp=1`).",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "URL (or REQUEST_URI).",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$url"
                                },
                                {
                                    "name": "param",
                                    "content": "Value. Defaults to 1.",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$value"
                                },
                                {
                                    "name": "return",
                                    "content": "AMP URL.",
                                    "types": [
                                        "string"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "functions": [
                                {
                                    "name": "add_query_arg",
                                    "line": 91,
                                    "end_line": 91
                                },
                                {
                                    "name": "amp_get_slug",
                                    "line": 91,
                                    "end_line": 91
                                }
                            ]
                        }
                    },
                    {
                        "name": "add_path_suffix",
                        "namespace": "AmpProject\\AmpWP",
                        "aliases": {
                            "Service": "\\AmpProject\\AmpWP\\Infrastructure\\Service"
                        },
                        "line": 102,
                        "end_line": 147,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$url",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Get paired AMP URL using a endpoint suffix.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "todo",
                                    "content": "The URL parsing and serialization logic here should ideally be put into a reusable class."
                                },
                                {
                                    "name": "param",
                                    "content": "URL (or REQUEST_URI).",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$url"
                                },
                                {
                                    "name": "return",
                                    "content": "AMP URL.",
                                    "types": [
                                        "string"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "remove_path_suffix",
                                    "class": "\\AmpProject\\AmpWP\\PairedUrl",
                                    "static": false,
                                    "line": 103,
                                    "end_line": 103
                                }
                            ],
                            "functions": [
                                {
                                    "name": "wp_parse_url",
                                    "line": 105,
                                    "end_line": 105
                                },
                                {
                                    "name": "array_merge",
                                    "line": 110,
                                    "end_line": 113
                                },
                                {
                                    "name": "wp_parse_url",
                                    "line": 111,
                                    "end_line": 111
                                },
                                {
                                    "name": "home_url",
                                    "line": 111,
                                    "end_line": 111
                                },
                                {
                                    "name": "is_ssl",
                                    "line": 116,
                                    "end_line": 116
                                },
                                {
                                    "name": "wp_unslash",
                                    "line": 120,
                                    "end_line": 120
                                },
                                {
                                    "name": "trailingslashit",
                                    "line": 123,
                                    "end_line": 123
                                },
                                {
                                    "name": "user_trailingslashit",
                                    "line": 124,
                                    "end_line": 124
                                },
                                {
                                    "name": "amp_get_slug",
                                    "line": 124,
                                    "end_line": 124
                                }
                            ]
                        }
                    }
                ],
                "doc": {
                    "description": "Service for manipulating a paired URL.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "package",
                            "content": "AmpProject\\AmpWP"
                        },
                        {
                            "name": "since",
                            "content": "2.1"
                        }
                    ]
                }
            }
        ],
        "hooks": []
    },
    "200": {
        "file": {
            "description": "Class LegacyReaderUrlStructure.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AmpProject\\AmpWP"
                }
            ]
        },
        "path": "src\/PairedUrlStructure\/LegacyReaderUrlStructure.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [],
        "hooks": [
            {
                "name": "amp_pre_get_permalink",
                "line": 44,
                "end_line": 44,
                "type": "filter",
                "arguments": [
                    "false",
                    "$post_id"
                ],
                "doc": {
                    "description": "Filters the AMP permalink to short-circuit normal generation.",
                    "long_description": "Returning a string value in this filter will bypass the `get_permalink()` from being called and the `amp_get_permalink` filter will not apply.",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.4"
                        },
                        {
                            "name": "since",
                            "content": "1.0",
                            "description": "This filter only applies when using the legacy reader paired URL structure."
                        },
                        {
                            "name": "param",
                            "content": "Short-circuited URL.",
                            "types": [
                                "false"
                            ],
                            "variable": "$url"
                        },
                        {
                            "name": "param",
                            "content": "Post ID.",
                            "types": [
                                "int"
                            ],
                            "variable": "$post_id"
                        }
                    ]
                }
            },
            {
                "name": "amp_get_permalink",
                "line": 81,
                "end_line": 81,
                "type": "filter",
                "arguments": [
                    "$amp_url",
                    "$post_id"
                ],
                "doc": {
                    "description": "Filters AMP permalink.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "since",
                            "content": "0.2"
                        },
                        {
                            "name": "since",
                            "content": "1.0",
                            "description": "This filter only applies when using the legacy reader paired URL structure."
                        },
                        {
                            "name": "param",
                            "content": "AMP URL.",
                            "types": [
                                "string"
                            ],
                            "variable": "$amp_url"
                        },
                        {
                            "name": "param",
                            "content": "Post ID.",
                            "types": [
                                "int"
                            ],
                            "variable": "$post_id"
                        }
                    ]
                }
            }
        ]
    },
    "204": {
        "file": {
            "description": "Abstract class PairedUrlStructure.",
            "long_description": "",
            "tags": [
                {
                    "name": "package",
                    "content": "AmpProject\\AmpWP"
                }
            ]
        },
        "path": "src\/PairedUrlStructure.php",
        "root": "\/var\/www\/html\/wp-content\/plugins\/amp",
        "classes": [
            {
                "name": "PairedUrlStructure",
                "namespace": "AmpProject\\AmpWP",
                "line": 16,
                "end_line": 59,
                "final": false,
                "abstract": true,
                "extends": "",
                "implements": [],
                "properties": [
                    {
                        "name": "$paired_url",
                        "line": 23,
                        "end_line": 23,
                        "default": null,
                        "static": false,
                        "visibility": "protected",
                        "doc": {
                            "description": "Paired URL service.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "var",
                                    "content": "",
                                    "types": [
                                        "\\AmpProject\\AmpWP\\PairedUrl"
                                    ],
                                    "variable": ""
                                }
                            ]
                        }
                    }
                ],
                "methods": [
                    {
                        "name": "__construct",
                        "namespace": "AmpProject\\AmpWP",
                        "aliases": [],
                        "line": 30,
                        "end_line": 32,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$paired_url",
                                "default": null,
                                "type": "\\AmpProject\\AmpWP\\PairedUrl"
                            }
                        ],
                        "doc": {
                            "description": "PairedUrlStructure constructor.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "Paired URL service.",
                                    "types": [
                                        "\\AmpProject\\AmpWP\\PairedUrl"
                                    ],
                                    "variable": "$paired_url"
                                }
                            ]
                        }
                    },
                    {
                        "name": "has_endpoint",
                        "namespace": "AmpProject\\AmpWP",
                        "aliases": [],
                        "line": 40,
                        "end_line": 42,
                        "final": false,
                        "abstract": false,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$url",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Determine a given URL is for a paired AMP request.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "URL (or REQUEST_URI).",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$url"
                                },
                                {
                                    "name": "return",
                                    "content": "True if the URL has the paired endpoint.",
                                    "types": [
                                        "bool"
                                    ]
                                }
                            ]
                        },
                        "uses": {
                            "methods": [
                                {
                                    "name": "remove_endpoint",
                                    "class": "\\AmpProject\\AmpWP\\PairedUrlStructure",
                                    "static": false,
                                    "line": 41,
                                    "end_line": 41
                                }
                            ]
                        }
                    },
                    {
                        "name": "add_endpoint",
                        "namespace": "AmpProject\\AmpWP",
                        "aliases": [],
                        "line": 50,
                        "end_line": 50,
                        "final": false,
                        "abstract": true,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$url",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Turn a given URL into a paired AMP URL.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "URL (or REQUEST_URI).",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$url"
                                },
                                {
                                    "name": "return",
                                    "content": "AMP URL.",
                                    "types": [
                                        "string"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "remove_endpoint",
                        "namespace": "AmpProject\\AmpWP",
                        "aliases": [],
                        "line": 58,
                        "end_line": 58,
                        "final": false,
                        "abstract": true,
                        "static": false,
                        "visibility": "public",
                        "arguments": [
                            {
                                "name": "$url",
                                "default": null,
                                "type": ""
                            }
                        ],
                        "doc": {
                            "description": "Remove the paired AMP endpoint from a given URL.",
                            "long_description": "",
                            "tags": [
                                {
                                    "name": "param",
                                    "content": "URL (or REQUEST_URI).",
                                    "types": [
                                        "string"
                                    ],
                                    "variable": "$url"
                                },
                                {
                                    "name": "return",
                                    "content": "URL with AMP stripped.",
                                    "types": [
                                        "string"
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "doc": {
                    "description": "Interface for classes that implement a PairedUrl.",
                    "long_description": "",
                    "tags": [
                        {
                            "name": "package",
                            "content": "AmpProject\\AmpWP"
                        },
                        {
                            "name": "since",
                            "content": "2.1"
                        }
                    ]
                }
            }
        ],
        "hooks": []
    }
}