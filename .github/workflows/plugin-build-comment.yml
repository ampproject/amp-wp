name: Comment on PR with Plugin Builds

on:
  issue_comment:
    types:
      - created

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  build-zip:
    name: "Build: ${{ matrix.build }} build ZIP"
    if: >
      contains(github.event.comment.html_url, '/pull/') &&
      contains(github.event.comment.body, '/amp-wp build')
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.retrieve-branch-name.outputs.branch_name }}
      git-sha-8: ${{ steps.retrieve-git-sha-8.outputs.sha8 }}
    strategy:
      matrix:
        build: ["dev", "prod"]

    steps:
      - name: Check out source files
        uses: actions/checkout@v3

      - name: Add reaction on comment
        run: >
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/$OWNER/$REPO/pulls/comments/$COMMENT_ID/reactions \
            -f content='+1'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.event.repository.owner.login }}
          REPO: ${{ github.event.repository.name }}
          COMMENT_ID: ${{ github.event.comment.id }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "7.0"

      - name: Setup Node
        uses: actions/setup-node@v3.4.1
        with:
          node-version-file: ".nvmrc"
          cache: npm

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Configure Composer cache
        uses: actions/cache@v3.0.8
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        # Scripts are not ignored as they are needed to apply patches for the
        # `sabberworm/php-css-parser` dependency.
        run: composer install --prefer-dist --optimize-autoloader

      - name: Install Node dependencies
        run: npm ci
        env:
          CI: true

      - name: Create destination directories
        run: mkdir -p builds/${{ matrix.build }}

      - name: Build plugin
        run: |
          npm run package:${{ matrix.build }}
          mv amp.zip builds/${{ matrix.build }}/amp.zip
        env:
          LAST_PR_COMMIT_HASH: ${{ github.event.pull_request.head.sha }}

      - name: Retrieve branch name
        id: retrieve-branch-name
        run: echo "::set-output name=branch_name::$(REF=${GITHUB_HEAD_REF:-$GITHUB_REF} && echo ${REF#refs/heads/} | sed 's/\//-/g')"

      - name: Retrieve git SHA-8 string
        id: retrieve-git-sha-8
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

      - name: Upload build as artifact
        uses: actions/upload-artifact@v3
        with:
          name: amp-${{ steps.retrieve-branch-name.outputs.branch_name }}-${{ steps.retrieve-git-sha-8.outputs.sha8 }}-${{ matrix.build }}
          path: builds/${{ matrix.build }}

  #-----------------------------------------------------------------------------------------------------------------------

  upload-to-gcs:
    name: Upload plugin ZIPs to Google Cloud Storage
    runs-on: ubuntu-latest
    needs:
      - build-zip
    steps:
      - name: Download dev build
        uses: actions/download-artifact@v3
        with:
          name: amp-${{ needs.build-zip.outputs.branch-name }}-${{ needs.build-zip.outputs.git-sha-8 }}-dev
          path: builds/dev

      - name: Download prod build
        uses: actions/download-artifact@v3
        with:
          name: amp-${{ needs.build-zip.outputs.branch-name }}-${{ needs.build-zip.outputs.git-sha-8 }}-prod
          path: builds/prod

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCS_PROJECT_ID }}
          service_account_key: ${{ secrets.GCS_APPLICATION_CREDENTIALS }}

      - name: Upload dev build to bucket
        run: gsutil cp -r builds/dev/amp.zip gs://ampwp_github_artifacts/${{ github.ref }}/dev/amp.zip

      - name: Upload prod build to bucket
        run: gsutil cp -r builds/prod/amp.zip gs://ampwp_github_artifacts/${{ github.ref }}/prod/amp.zip

  #-----------------------------------------------------------------------------------------------------------------------

  comment-on-pr:
    name: Comment on PR with links to plugin ZIPs
    runs-on: ubuntu-latest
    needs: upload-to-gcs

    outputs:
      comment_body: ${{ steps.get-comment-body.outputs.body }}

    steps:
      - name: Check if a comment was already made
        id: find-comment
        uses: peter-evans/find-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: github-actions[bot]
          body-includes: Plugin builds for

      - name: Get comment body
        id: get-comment-body
        # Setting a multi-line output requires escaping line-feeds. See <https://github.community/t/set-output-truncates-multiline-strings/16852/3>.
        run: |
          body="Plugin builds for ${{ github.event.pull_request.head.sha }} are ready :bellhop_bell:!
          - Download [development build](https://storage.googleapis.com/ampwp_github_artifacts/${{ github.ref }}/dev/amp.zip?${{ github.sha }})
          - Download [production build](https://storage.googleapis.com/ampwp_github_artifacts/${{ github.ref }}/prod/amp.zip?${{ github.sha }})"
          body="${body//$'\n'/'%0A'}"
          echo "::set-output name=body::$body"

      - name: Create comment on PR with links to plugin builds
        if: ${{ steps.find-comment.outputs.comment-id == '' }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.get-comment-body.outputs.body }}

      - name: Update comment on PR with links to plugin builds
        if: ${{ steps.find-comment.outputs.comment-id != '' }}
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          edit-mode: replace
          body: ${{ steps.get-comment-body.outputs.body }}
